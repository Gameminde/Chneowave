#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Correction du probl√®me acquisition_controller.py en modifiant main_window.py
"""

import sys
from pathlib import Path

# Ajouter le chemin du projet
sys.path.insert(0, str(Path(__file__).parent / "src"))

def fix_main_window_imports():
    """Corriger les imports dans main_window.py pour √©viter acquisition_controller"""
    print("üîß CORRECTION IMPORTS MAINWINDOW")
    print("=" * 40)
    
    try:
        # Lire le fichier main_window.py
        main_window_path = Path("src/hrneowave/gui/main_window.py")
        
        if not main_window_path.exists():
            print(f"‚ùå Fichier non trouv√©: {main_window_path}")
            return False
        
        with open(main_window_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        print("‚úÖ Fichier main_window.py lu")
        
        # Cr√©er une sauvegarde
        backup_path = main_window_path.with_suffix('.py.backup')
        with open(backup_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"‚úÖ Sauvegarde cr√©√©e: {backup_path}")
        
        # Modifier les imports probl√©matiques
        print("üîÑ Modification des imports...")
        
        # Remplacer l'import de acquisition_controller par un import conditionnel
        old_import = "from hrneowave.gui.controllers.acquisition_controller import AcquisitionController"
        new_import = """# Import conditionnel pour √©viter les erreurs
try:
    from hrneowave.gui.controllers.acquisition_controller import AcquisitionController
    ACQUISITION_CONTROLLER_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è AcquisitionController non disponible: {e}")
    AcquisitionController = None
    ACQUISITION_CONTROLLER_AVAILABLE = False"""
        
        if old_import in content:
            content = content.replace(old_import, new_import)
            print("‚úÖ Import AcquisitionController modifi√©")
        else:
            print("‚ö†Ô∏è Import AcquisitionController non trouv√©")
        
        # Modifier l'import de main_controller
        old_main_import = "from hrneowave.gui.controllers.main_controller import MainController"
        new_main_import = """# Import conditionnel pour √©viter les erreurs
try:
    from hrneowave.gui.controllers.main_controller import MainController
    MAIN_CONTROLLER_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è MainController non disponible: {e}")
    MainController = None
    MAIN_CONTROLLER_AVAILABLE = False"""
        
        if old_main_import in content:
            content = content.replace(old_main_import, new_main_import)
            print("‚úÖ Import MainController modifi√©")
        else:
            print("‚ö†Ô∏è Import MainController non trouv√©")
        
        # √âcrire le fichier modifi√©
        with open(main_window_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ Fichier main_window.py modifi√©")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la modification: {e}")
        return False

def create_simple_main_window():
    """Cr√©er une version simplifi√©e de main_window.py"""
    print("\nüîß CR√âATION MAINWINDOW SIMPLIFI√âE")
    print("=" * 40)
    
    simple_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Fen√™tre principale simplifi√©e pour CHNeoWave
Version de test sans acquisition_controller
"""

import logging
from PySide6.QtWidgets import QMainWindow, QMessageBox, QStackedWidget, QHBoxLayout, QVBoxLayout, QWidget, QLabel
from PySide6.QtCore import Signal, Slot, QTimer, Qt

logger = logging.getLogger(__name__)

# Import conditionnel pour √©viter les erreurs
try:
    from hrneowave.gui.controllers.acquisition_controller import AcquisitionController
    ACQUISITION_CONTROLLER_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è AcquisitionController non disponible: {e}")
    AcquisitionController = None
    ACQUISITION_CONTROLLER_AVAILABLE = False

try:
    from hrneowave.gui.controllers.main_controller import MainController
    MAIN_CONTROLLER_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è MainController non disponible: {e}")
    MainController = None
    MAIN_CONTROLLER_AVAILABLE = False

from hrneowave.gui.styles.theme_manager import ThemeManager

# Import du syst√®me d'animations Phase 6
try:
    from hrneowave.gui.animations import PageTransitionManager, TransitionType, MaritimeAnimator
except ImportError:
    PageTransitionManager = None
    TransitionType = None
    MaritimeAnimator = None
    logger.warning("Syst√®me d'animations Phase 6 non disponible")

# Import des vues v2 et configurations
try:
    from hrneowave.gui.views import (
        DashboardViewMaritime,
        WelcomeView,
        VIEWS_CONFIG,
        NAVIGATION_ORDER
    )
except ImportError as e:
    print(f"‚ö†Ô∏è Vues non disponibles: {e}")
    DashboardViewMaritime = None
    WelcomeView = None
    VIEWS_CONFIG = {}
    NAVIGATION_ORDER = []

class SimpleMainWindow(QMainWindow):
    """Fen√™tre principale simplifi√©e de l'application CHNeoWave"""
    
    projectCreated = Signal()
    
    def __init__(self, config=None, parent=None):
        super().__init__(parent)
        self.setWindowTitle("CHNeoWave - Version Simplifi√©e")
        self.setMinimumSize(1024, 768)
        
        # Configuration
        self.config = config or {}
        
        # √âtat de l'application
        self.is_acquiring = False
        self.acquisition_controller = None
        self.analysis_controller = None
        self.project_controller = None
        
        # Construction de l'interface
        logger.info("D√©but de la construction de l'interface simplifi√©e...")
        self._build_simple_ui()
        logger.info("Interface simplifi√©e construite avec succ√®s")
        
        logger.info("Interface utilisateur simplifi√©e charg√©e avec succ√®s")

    def _build_simple_ui(self):
        """Construit une interface utilisateur simplifi√©e."""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(20)

        # Titre
        title_label = QLabel("CHNeoWave - Laboratoire d'Hydrodynamique Maritime")
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setStyleSheet("""
            QLabel {
                font-size: 24px;
                font-weight: bold;
                color: #2c3e50;
                padding: 20px;
                background-color: #ecf0f1;
                border-radius: 10px;
            }
        """)
        main_layout.addWidget(title_label)

        # Message de statut
        status_label = QLabel("‚úÖ Interface simplifi√©e charg√©e avec succ√®s")
        status_label.setAlignment(Qt.AlignCenter)
        status_label.setStyleSheet("""
            QLabel {
                font-size: 16px;
                color: #27ae60;
                padding: 15px;
                background-color: #d5f4e6;
                border-radius: 8px;
            }
        """)
        main_layout.addWidget(status_label)

        # Informations syst√®me
        info_label = QLabel(f"""
        üìä Informations syst√®me:
        ‚Ä¢ AcquisitionController: {'‚úÖ Disponible' if ACQUISITION_CONTROLLER_AVAILABLE else '‚ùå Non disponible'}
        ‚Ä¢ MainController: {'‚úÖ Disponible' if MAIN_CONTROLLER_AVAILABLE else '‚ùå Non disponible'}
        ‚Ä¢ Animations Phase 6: {'‚úÖ Disponible' if PageTransitionManager else '‚ùå Non disponible'}
        ‚Ä¢ Vues: {'‚úÖ Disponible' if WelcomeView else '‚ùå Non disponible'}
        """)
        info_label.setAlignment(Qt.AlignLeft)
        info_label.setStyleSheet("""
            QLabel {
                font-size: 14px;
                color: #34495e;
                padding: 15px;
                background-color: #f8f9fa;
                border-radius: 8px;
                border: 1px solid #dee2e6;
            }
        """)
        main_layout.addWidget(info_label)

        # Espace flexible
        spacer = QWidget()
        spacer.setSizePolicy(QWidget.Expanding, QWidget.Expanding)
        main_layout.addWidget(spacer)

        # Message de fermeture
        close_label = QLabel("Cette fen√™tre se fermera automatiquement dans 10 secondes...")
        close_label.setAlignment(Qt.AlignCenter)
        close_label.setStyleSheet("""
            QLabel {
                font-size: 12px;
                color: #7f8c8d;
                padding: 10px;
            }
        """)
        main_layout.addWidget(close_label)

    def showEvent(self, event):
        """Gestionnaire d'√©v√©nement d'affichage"""
        super().showEvent(event)
        logger.info("Fen√™tre simplifi√©e affich√©e")

    def closeEvent(self, event):
        """Gestionnaire d'√©v√©nement de fermeture"""
        logger.info("Fen√™tre simplifi√©e ferm√©e")
        super().closeEvent(event)
'''
    
    try:
        simple_path = Path("src/hrneowave/gui/simple_main_window.py")
        with open(simple_path, 'w', encoding='utf-8') as f:
            f.write(simple_content)
        print("‚úÖ Fen√™tre simplifi√©e cr√©√©e: simple_main_window.py")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation: {e}")
        return False

def create_test_simple_window():
    """Cr√©er un test pour la fen√™tre simplifi√©e"""
    print("\nüîß CR√âATION TEST FEN√äTRE SIMPLIFI√âE")
    print("=" * 40)
    
    test_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test de la fen√™tre simplifi√©e CHNeoWave
"""

import sys
from pathlib import Path

# Ajouter le chemin du projet
sys.path.insert(0, str(Path(__file__).parent / "src"))

def test_simple_window():
    """Test de la fen√™tre simplifi√©e"""
    print("üöÄ TEST FEN√äTRE SIMPLIFI√âE")
    print("=" * 40)
    
    try:
        from PySide6.QtWidgets import QApplication
        from PySide6.QtCore import Qt, QTimer
        
        # Cr√©er QApplication
        app = QApplication.instance()
        if app is None:
            app = QApplication(sys.argv)
            app.setApplicationName("CHNeoWave Simple Test")
        
        print("‚úÖ QApplication cr√©√©")
        
        # Test import fen√™tre simplifi√©e
        print("üîÑ Import SimpleMainWindow...")
        from hrneowave.gui.simple_main_window import SimpleMainWindow
        print("‚úÖ SimpleMainWindow import√©")
        
        # Test cr√©ation fen√™tre simplifi√©e
        print("üîÑ Cr√©ation SimpleMainWindow...")
        main_window = SimpleMainWindow()
        print("‚úÖ SimpleMainWindow cr√©√©e")
        
        # Test affichage
        print("üîÑ Affichage SimpleMainWindow...")
        main_window.show()
        main_window.raise_()
        main_window.activateWindow()
        
        visible = main_window.isVisible()
        print(f"‚úÖ SimpleMainWindow visible: {visible}")
        
        if visible:
            print("üéâ SUCC√àS: SimpleMainWindow visible!")
            
            # Maintenir ouvert 10 secondes
            timer = QTimer()
            timer.timeout.connect(app.quit)
            timer.start(10000)
            
            print("üîÑ Maintien ouvert 10 secondes...")
            exit_code = app.exec()
            print(f"‚úÖ Test termin√© (code: {exit_code})")
            return True
        else:
            print("‚ùå PROBL√àME: SimpleMainWindow non visible")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    exit(0 if test_simple_window() else 1)
'''
    
    try:
        with open('test_simple_window.py', 'w', encoding='utf-8') as f:
            f.write(test_content)
        print("‚úÖ Test fen√™tre simplifi√©e cr√©√©: test_simple_window.py")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du test: {e}")
        return False

def main():
    """Point d'entr√©e principal"""
    print("üîß CORRECTEUR ACQUISITION CONTROLLER")
    print("=" * 50)
    
    # Corriger les imports dans main_window.py
    if not fix_main_window_imports():
        print("‚ùå √âCHEC: Correction des imports main_window.py")
        return 1
    
    # Cr√©er fen√™tre simplifi√©e
    if not create_simple_main_window():
        print("‚ùå √âCHEC: Cr√©ation fen√™tre simplifi√©e")
        return 1
    
    # Cr√©er test fen√™tre simplifi√©e
    if not create_test_simple_window():
        print("‚ùå √âCHEC: Cr√©ation test fen√™tre simplifi√©e")
        return 1
    
    print("\nüéâ CORRECTION TERMIN√âE!")
    print("‚úÖ Imports main_window.py corrig√©s")
    print("‚úÖ Fen√™tre simplifi√©e cr√©√©e: simple_main_window.py")
    print("‚úÖ Test fen√™tre simplifi√©e cr√©√©: test_simple_window.py")
    
    print("\nüöÄ COMMANDES DE TEST:")
    print("1. Diagnostic acquisition: python debug_acquisition_controller.py")
    print("2. Test fen√™tre simplifi√©e: python test_simple_window.py")
    print("3. Test main_window corrig√©: python test_simple_main_window.py")
    print("4. Lancement application: python main.py")
    
    return 0

if __name__ == "__main__":
    exit(main()) 