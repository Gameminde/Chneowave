#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test Qt Minimal - Diagnostic Fondamental
Test pour v√©rifier si Qt fonctionne correctement sur ce syst√®me
"""

import sys
from PySide6.QtWidgets import QApplication, QWidget, QLabel, QVBoxLayout, QPushButton, QMessageBox
from PySide6.QtCore import Qt

def test_qt_basique():
    """Test Qt le plus basique possible"""
    print("=== TEST QT BASIQUE ===")
    
    # Cr√©er QApplication
    app = QApplication(sys.argv)
    app.setApplicationName("Test Qt Basique")
    print(f"‚úÖ QApplication cr√©√©e sur: {app.platformName()}")
    print(f"‚úÖ Nombre d'√©crans: {len(app.screens())}")
    
    for i, screen in enumerate(app.screens()):
        print(f"   √âcran {i}: {screen.geometry()}")
    
    # Cr√©er fen√™tre simple
    window = QWidget()
    window.setWindowTitle("Test Qt Basique - CHNeoWave Diagnostic")
    window.setGeometry(300, 300, 500, 400)
    
    # Layout simple
    layout = QVBoxLayout()
    
    # Label de test
    label = QLabel("üéâ SI VOUS VOYEZ CETTE FEN√äTRE, QT FONCTIONNE !")
    label.setAlignment(Qt.AlignCenter)
    label.setStyleSheet("""
        QLabel {
            font-size: 16px;
            font-weight: bold;
            color: #2E8B57;
            padding: 20px;
            background-color: #F0F8FF;
            border: 2px solid #2E8B57;
            border-radius: 10px;
        }
    """)
    layout.addWidget(label)
    
    # Informations syst√®me
    info_label = QLabel(f"""
üìã INFORMATIONS SYST√àME:

‚úÖ Plateforme: {app.platformName()}
‚úÖ √âcrans disponibles: {len(app.screens())}
‚úÖ G√©om√©trie fen√™tre: {window.geometry()}

Si cette fen√™tre s'affiche correctement,
le probl√®me vient de CHNeoWave, pas de Qt.
    """)
    info_label.setAlignment(Qt.AlignLeft)
    info_label.setStyleSheet("""
        QLabel {
            font-size: 12px;
            padding: 15px;
            background-color: #FFFACD;
            border: 1px solid #DDD;
            border-radius: 5px;
        }
    """)
    layout.addWidget(info_label)
    
    # Bouton de test
    def show_success_message():
        msg = QMessageBox()
        msg.setWindowTitle("Qt Fonctionne !")
        msg.setText("üéâ EXCELLENT !\n\nQt fonctionne parfaitement sur votre syst√®me.\n\nLe probl√®me d'affichage de CHNeoWave vient donc\nde l'architecture de l'application, pas de Qt.")
        msg.setIcon(QMessageBox.Information)
        msg.exec()
    
    button = QPushButton("‚úÖ Cliquez ici pour confirmer que Qt fonctionne")
    button.setStyleSheet("""
        QPushButton {
            font-size: 14px;
            font-weight: bold;
            color: white;
            background-color: #2E8B57;
            border: none;
            border-radius: 8px;
            padding: 12px;
        }
        QPushButton:hover {
            background-color: #228B22;
        }
        QPushButton:pressed {
            background-color: #006400;
        }
    """)
    button.clicked.connect(show_success_message)
    layout.addWidget(button)
    
    # Bouton fermer
    close_button = QPushButton("‚ùå Fermer le test")
    close_button.setStyleSheet("""
        QPushButton {
            font-size: 12px;
            color: #8B0000;
            background-color: #FFE4E1;
            border: 1px solid #8B0000;
            border-radius: 5px;
            padding: 8px;
        }
        QPushButton:hover {
            background-color: #FFC0CB;
        }
    """)
    close_button.clicked.connect(app.quit)
    layout.addWidget(close_button)
    
    window.setLayout(layout)
    
    # AFFICHAGE
    print("üîç Affichage de la fen√™tre Qt basique...")
    window.show()
    window.raise_()
    window.activateWindow()
    
    print(f"‚úÖ Fen√™tre visible: {window.isVisible()}")
    print(f"‚úÖ G√©om√©trie: {window.geometry()}")
    print(f"‚úÖ Position: ({window.x()}, {window.y()})")
    print(f"‚úÖ Taille: {window.width()}x{window.height()}")
    
    print("\nüîç Si vous voyez la fen√™tre, Qt fonctionne parfaitement !")
    print("üîç Si vous ne voyez rien, le probl√®me vient de l'environnement Qt.")
    
    # Lancer la boucle d'√©v√©nements
    exit_code = app.exec()
    print(f"\n‚úÖ Application Qt basique termin√©e avec code: {exit_code}")
    
    return exit_code

if __name__ == "__main__":
    try:
        result = test_qt_basique()
        print(f"\nüèÅ Test Qt basique termin√© avec code: {result}")
        
        if result == 0:
            print("üéâ QT FONCTIONNE PARFAITEMENT")
            print("‚û°Ô∏è  Le probl√®me d'affichage CHNeoWave vient de l'architecture de l'app")
        else:
            print("‚ùå PROBL√àME AVEC QT D√âTECT√â")
            print("‚û°Ô∏è  Il faut corriger l'environnement Qt avant CHNeoWave")
        
        sys.exit(result)
        
    except Exception as e:
        print(f"‚ùå ERREUR CRITIQUE: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)