#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test simple pour diagnostiquer les backends CHNeoWave
"""

import sys
import os
import time
from pathlib import Path

# Ajouter le r√©pertoire src au path
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

from PyQt5.QtWidgets import QApplication
from PyQt5.QtCore import QTimer, QEventLoop

from hrneowave.gui.controllers.acquisition_controller import (
    AcquisitionController, AcquisitionConfig, AcquisitionMode
)

def test_simulate_backend():
    """Test simple du backend de simulation"""
    print("=== Test Backend Simulation ===")
    
    # Cr√©er QApplication
    app = QApplication.instance()
    if app is None:
        app = QApplication([])
    
    # Configuration simple
    config = AcquisitionConfig(
        mode=AcquisitionMode.SIMULATE,
        sample_rate=32.0,
        n_channels=4,
        buffer_size=1000
    )
    
    print(f"Configuration: {config.sample_rate} Hz, {config.n_channels} canaux")
    
    # Cr√©er le contr√¥leur
    controller = AcquisitionController(config)
    print("‚úì Contr√¥leur cr√©√©")
    
    # Variables de test
    samples_count = 0
    
    def on_data(data, timestamp):
        nonlocal samples_count
        samples_count += 1
        if samples_count <= 5:  # Afficher les 5 premiers
            print(f"  √âchantillon {samples_count}: {data} √† {timestamp:.3f}s")
        elif samples_count == 6:
            print("  ...")
    
    def on_error(msg):
        print(f"  ‚ùå Erreur: {msg}")
    
    # Connecter les signaux
    controller.data_ready.connect(on_data)
    controller.error_occurred.connect(on_error)
    
    # Test de connexion
    print("\n1. Test de connexion...")
    if controller.connect():
        print("‚úì Connexion r√©ussie")
    else:
        print("‚ùå √âchec de connexion")
        return False
    
    # Test d'acquisition
    print("\n2. D√©marrage de l'acquisition...")
    if controller.start():
        print("‚úì Acquisition d√©marr√©e")
    else:
        print("‚ùå √âchec de d√©marrage")
        return False
    
    # Attendre 3 secondes avec traitement des √©v√©nements
    print("\n3. Acquisition en cours (3s)...")
    
    start_time = time.time()
    while time.time() - start_time < 3.0:
        app.processEvents()
        time.sleep(0.01)  # 10ms
    
    # Arr√™ter
    print("\n4. Arr√™t...")
    controller.stop()
    controller.disconnect()
    
    # R√©sultats
    expected = int(3.0 * config.sample_rate)
    print(f"\n=== R√©sultats ===")
    print(f"√âchantillons re√ßus: {samples_count}")
    print(f"√âchantillons attendus: ~{expected}")
    
    success = samples_count > 0
    if success:
        print("‚úÖ Test R√âUSSI")
    else:
        print("‚ùå Test √âCHOU√â")
    
    return success

def test_backend_detection():
    """Test de d√©tection des backends"""
    print("\n=== Test D√©tection Backends ===")
    
    # Test NI-DAQmx
    try:
        from hrneowave.hw.ni_daqmx_backend import NIDAQmxBackend
        print("‚úì Backend NI-DAQmx d√©tect√©")
        ni_available = True
    except ImportError as e:
        print(f"‚ùå Backend NI-DAQmx non disponible: {e}")
        ni_available = False
    
    # Test IOtech
    try:
        from hrneowave.hw.iotech_backend import IOtechBackend
        print("‚úì Backend IOtech d√©tect√©")
        iotech_available = True
    except ImportError as e:
        print(f"‚ùå Backend IOtech non disponible: {e}")
        iotech_available = False
    
    return ni_available, iotech_available

def main():
    print("CHNeoWave - Test Simple des Backends")
    print("=" * 40)
    
    # Test de d√©tection
    ni_ok, iotech_ok = test_backend_detection()
    
    # Test du backend de simulation
    sim_ok = test_simulate_backend()
    
    print("\n" + "=" * 40)
    print("R√âSUM√â")
    print("=" * 40)
    print(f"Simulation    : {'‚úÖ' if sim_ok else '‚ùå'}")
    print(f"NI-DAQmx      : {'‚úÖ' if ni_ok else '‚ùå'}")
    print(f"IOtech        : {'‚úÖ' if iotech_ok else '‚ùå'}")
    
    if sim_ok:
        print("\nüéâ Backend de simulation fonctionnel !")
        return 0
    else:
        print("\nüí• Probl√®me avec le backend de simulation")
        return 1

if __name__ == '__main__':
    sys.exit(main())