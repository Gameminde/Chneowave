#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CHNeoWave - Point d'entrée principal
Logiciel d'acquisition et d'analyse de houle pour laboratoires maritimes

Version 1.0.0 - Interface refactorisée avec flux séquentiel
Flux : Accueil -> Calibration -> Acquisition -> Analyse
"""

import sys
import os
from pathlib import Path

# Ajouter le répertoire src au PYTHONPATH
project_root = Path(__file__).parent
src_path = project_root / "src"
sys.path.insert(0, str(src_path))

# Configuration du logging AVANT tout import GUI
from hrneowave.utils import setup_logging
setup_logging()

# Les imports PyQt5 et des modules GUI seront faits après la création de QApplication

# La classe CHNeoWaveMainWindow sera définie dans main() après les imports PyQt5

def main():
    """
    Point d'entrée principal de CHNeoWave.
    Lance l'application avec le nouveau flux séquentiel.
    """
    # Import de QApplication en premier
    from PyQt5.QtWidgets import QApplication
    
    app = QApplication(sys.argv)
    app.setApplicationName("CHNeoWave")
    app.setApplicationVersion("1.0.0")
    app.setOrganizationName("Laboratoire Maritime")
    
    # Maintenant on peut importer les autres modules PyQt5 et GUI
    from PyQt5.QtWidgets import QMainWindow, QVBoxLayout, QWidget, QStackedWidget
    from PyQt5.QtCore import Qt
    from hrneowave.gui.view_manager import get_view_manager
    from hrneowave.gui.controllers.main_controller import MainController
    from hrneowave.gui.theme import get_stylesheet
    
    # Définition de la classe CHNeoWaveMainWindow après les imports PyQt5
    class CHNeoWaveMainWindow(QMainWindow):
        """
        Fenêtre principale CHNeoWave avec nouveau flux séquentiel
        """
        
        def __init__(self):
            super().__init__()
            self.setWindowTitle("CHNeoWave v1.0.0 - Laboratoire Maritime")
            self.setMinimumSize(1200, 800)
            self.resize(1366, 768)  # Optimisé pour 1366x768
            
            # Application du thème professionnel
            self.setStyleSheet(get_stylesheet())
            
            # Configuration du widget central
            central_widget = QWidget()
            self.setCentralWidget(central_widget)
            
            # Layout principal
            layout = QVBoxLayout(central_widget)
            layout.setContentsMargins(0, 0, 0, 0)
            layout.setSpacing(0)
            
            # Création du QStackedWidget
            self.stacked_widget = QStackedWidget()
            layout.addWidget(self.stacked_widget)
            
            # Création du ViewManager avec le QStackedWidget
            self.view_manager = get_view_manager(self.stacked_widget)
            
            # Enregistrement des vues
            self.setup_views()
            
            # Création du MainController avec le ViewManager et une config par défaut
            default_config = {
                'log_level': 'INFO',
                'theme': 'dark'
            }
            self.main_controller = MainController(self, default_config)
            
            # Centrage de la fenêtre
            self._center_window()
            
        def setup_views(self):
            """
            Enregistre les vues dans le ViewManager
            """
            # Import des vues après création de QApplication
            from hrneowave.gui.views.welcome_view import WelcomeView
            from hrneowave.gui.views.calibration_view import CalibrationView
            from hrneowave.gui.views.acquisition_view import AcquisitionView
            from hrneowave.gui.views.analysis_view import AnalysisView
            
            # Vue d'accueil
            self.welcome_view = WelcomeView()
            self.view_manager.register_view("welcome", self.welcome_view)
            
            # Vue de calibration
            self.calibration_view = CalibrationView()
            self.view_manager.register_view("calibration", self.calibration_view)
            
            # Vue d'acquisition
            self.acquisition_view = AcquisitionView()
            self.view_manager.register_view("acquisition", self.acquisition_view)
            
            # Vue d'analyse
            self.analysis_view = AnalysisView()
            self.view_manager.register_view("analysis", self.analysis_view)
            
            print("Toutes les vues enregistrées dans le ViewManager (welcome, calibration, acquisition, analysis)")
        
        def _center_window(self):
            """
            Centre la fenêtre sur l'écran
            """
            screen = QApplication.desktop().screenGeometry()
            window = self.geometry()
            x = (screen.width() - window.width()) // 2
            y = (screen.height() - window.height()) // 2
            self.move(x, y)
    
    print("CHNeoWave v1.0.0 - Initialisation...")
    print("Flux séquentiel : Accueil -> Calibration -> Acquisition -> Analyse")
    print("Interface professionnelle pour laboratoire maritime")
    
    try:
        # Création et affichage de la fenêtre principale
        main_window = CHNeoWaveMainWindow()
        main_window.show()
        
        print("Application démarrée avec succès")
        print("En attente de l'interaction utilisateur...")
        
        # Lancement de la boucle d'événements
        return app.exec_()
        
    except Exception as e:
        print(f"❌ Erreur lors du lancement : {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main())