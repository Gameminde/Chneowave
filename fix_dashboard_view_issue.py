#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Correction du probl√®me sp√©cifique dans DashboardViewMaritime
"""

import sys
import traceback
from pathlib import Path

# Ajouter le chemin du projet
sys.path.insert(0, str(Path(__file__).parent / "src"))

def test_dashboard_view_creation_detailed():
    """Test d√©taill√© de cr√©ation de DashboardViewMaritime"""
    print("üîç TEST CR√âATION DASHBOARDVIEW D√âTAILL√â")
    print("=" * 50)
    
    try:
        from PySide6.QtWidgets import QApplication
        
        # Cr√©er QApplication
        app = QApplication.instance()
        if app is None:
            app = QApplication(sys.argv)
        
        print("‚úÖ QApplication cr√©√©")
        
        # Test import DashboardViewMaritime
        print("üîÑ Import DashboardViewMaritime...")
        from hrneowave.gui.views.dashboard_view import DashboardViewMaritime
        print("‚úÖ DashboardViewMaritime import√©")
        
        # Test cr√©ation DashboardViewMaritime avec debug d√©taill√©
        print("üîÑ Cr√©ation DashboardViewMaritime...")
        print("=" * 30)
        
        try:
            dashboard_view = DashboardViewMaritime(parent=None)
            print("‚úÖ DashboardViewMaritime cr√©√©e avec succ√®s")
            return True
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation DashboardViewMaritime: {e}")
            traceback.print_exc()
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        traceback.print_exc()
        return False

def fix_dashboard_view_imports():
    """Corriger les imports probl√©matiques dans DashboardViewMaritime"""
    print("\nüîß CORRECTION IMPORTS DASHBOARDVIEW")
    print("=" * 40)
    
    try:
        # Lire le fichier dashboard_view.py
        dashboard_path = Path("src/hrneowave/gui/views/dashboard_view.py")
        
        if not dashboard_path.exists():
            print(f"‚ùå Fichier non trouv√©: {dashboard_path}")
            return False
        
        with open(dashboard_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        print("‚úÖ Fichier dashboard_view.py lu")
        
        # Cr√©er une sauvegarde
        backup_path = dashboard_path.with_suffix('.py.backup')
        with open(backup_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"‚úÖ Sauvegarde cr√©√©e: {backup_path}")
        
        # Remplacer les imports probl√©matiques par des imports s√ªrs
        original_imports = '''# Import hi√©rarchique PySide6 > PyQt6 > PyQt5
try:
    from PySide6.QtCore import Qt, QTimer, Signal, QPropertyAnimation, QEasingCurve, QRect
    from PySide6.QtWidgets import (
        QWidget, QVBoxLayout, QHBoxLayout, QGridLayout, QLabel, 
        QPushButton, QFrame, QScrollArea, QSizePolicy, QSpacerItem
    )
    from PySide6.QtGui import QFont, QPalette, QColor
    pyqtSignal = Signal
except ImportError:
    try:
        from PyQt6.QtCore import Qt, QTimer, pyqtSignal, QPropertyAnimation, QEasingCurve, QRect
        from PyQt6.QtWidgets import (
            QWidget, QVBoxLayout, QHBoxLayout, QGridLayout, QLabel, 
            QPushButton, QFrame, QScrollArea, QSizePolicy, QSpacerItem
        )
        from PyQt6.QtGui import QFont, QPalette, QColor
        Signal = pyqtSignal
    except ImportError:
        from PyQt5.QtCore import Qt, QTimer, pyqtSignal, QPropertyAnimation, QEasingCurve, QRect
        from PyQt5.QtWidgets import (
            QWidget, QVBoxLayout, QHBoxLayout, QGridLayout, QLabel, 
            QPushButton, QFrame, QScrollArea, QSizePolicy, QSpacerItem
        )
        from PyQt5.QtGui import QFont, QPalette, QColor
        Signal = pyqtSignal'''
        
        safe_imports = '''# Import PySide6 uniquement
from PySide6.QtCore import Qt, QTimer, Signal, QPropertyAnimation, QEasingCurve, QRect
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QGridLayout, QLabel, 
    QPushButton, QFrame, QScrollArea, QSizePolicy, QSpacerItem
)
from PySide6.QtGui import QFont, QPalette, QColor
pyqtSignal = Signal'''
        
        # Remplacer les imports
        content = content.replace(original_imports, safe_imports)
        print("‚úÖ Imports PySide6 simplifi√©s")
        
        # Remplacer les imports probl√©matiques des widgets maritimes
        maritime_imports = '''# Import des composants maritimes
try:
    from ..widgets.maritime import (
        MaritimeCard, KPIIndicator, MaritimeButton,
        StatusBeacon, MaritimeGrid
    )
    from ..widgets.maritime_components import (
        MaritimeTheme, StatusType, create_maritime_layout
    )
except ImportError:
    # Fallback si les widgets maritimes ne sont pas encore disponibles
    MaritimeCard = QFrame
    KPIIndicator = QFrame
    StatusBeacon = QFrame
    MaritimeButton = QPushButton
    MaritimeGrid = QFrame
    
    class MaritimeTheme:
        SPACE_XS = 8
        SPACE_SM = 13
        SPACE_MD = 21
        SPACE_LG = 34
        SPACE_XL = 55
        OCEAN_DEEP = "#0A1929"
        HARBOR_BLUE = "#1565C0"
        TIDAL_CYAN = "#00BCD4"
        FOAM_WHITE = "#FAFBFC"
        STORM_GRAY = "#37474F"
    
    class StatusType:
        ACTIVE = "active"
        WARNING = "warning"
        ERROR = "error"
        INACTIVE = "inactive"
    
    def create_maritime_layout(*args, **kwargs):
        return QVBoxLayout()'''
        
        safe_maritime_imports = '''# Import des composants maritimes (simplifi√©)
# Fallback pour les widgets maritimes
MaritimeCard = QFrame
KPIIndicator = QFrame
StatusBeacon = QFrame
MaritimeButton = QPushButton
MaritimeGrid = QFrame

class MaritimeTheme:
    SPACE_XS = 8
    SPACE_SM = 13
    SPACE_MD = 21
    SPACE_LG = 34
    SPACE_XL = 55
    OCEAN_DEEP = "#0A1929"
    HARBOR_BLUE = "#1565C0"
    TIDAL_CYAN = "#00BCD4"
    FOAM_WHITE = "#FAFBFC"
    STORM_GRAY = "#37474F"

class StatusType:
    ACTIVE = "active"
    WARNING = "warning"
    ERROR = "error"
    INACTIVE = "inactive"

def create_maritime_layout(*args, **kwargs):
    return QVBoxLayout()'''
        
        # Remplacer les imports maritimes
        content = content.replace(maritime_imports, safe_maritime_imports)
        print("‚úÖ Imports maritimes simplifi√©s")
        
        # Remplacer l'import probl√©matique de ProgressStepper
        progress_import = '''try:
    from ..widgets.progress_stepper import ProgressStepper
except ImportError:
    ProgressStepper = QFrame'''
        
        safe_progress_import = '''# Fallback pour ProgressStepper
ProgressStepper = QFrame'''
        
        # Remplacer l'import ProgressStepper
        content = content.replace(progress_import, safe_progress_import)
        print("‚úÖ Import ProgressStepper simplifi√©")
        
        # √âcrire le fichier modifi√©
        with open(dashboard_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ Fichier dashboard_view.py modifi√© avec imports s√ªrs")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la modification: {e}")
        traceback.print_exc()
        return False

def create_test_dashboard_view_fixed():
    """Cr√©er un test pour DashboardViewMaritime corrig√©"""
    print("\nüîß CR√âATION TEST DASHBOARDVIEW CORRIG√â")
    print("=" * 40)
    
    test_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test DashboardViewMaritime corrig√©
"""

import sys
import traceback
from pathlib import Path

# Ajouter le chemin du projet
sys.path.insert(0, str(Path(__file__).parent / "src"))

def test_dashboard_view_fixed():
    """Test DashboardViewMaritime corrig√©"""
    print("üöÄ TEST DASHBOARDVIEW CORRIG√â")
    print("=" * 50)
    
    try:
        from PySide6.QtWidgets import QApplication
        from PySide6.QtCore import Qt, QTimer
        
        # Cr√©er QApplication
        app = QApplication.instance()
        if app is None:
            app = QApplication(sys.argv)
            app.setApplicationName("CHNeoWave Dashboard Test")
        
        print("‚úÖ QApplication cr√©√©")
        
        # Test import DashboardViewMaritime
        print("üîÑ Import DashboardViewMaritime...")
        from hrneowave.gui.views.dashboard_view import DashboardViewMaritime
        print("‚úÖ DashboardViewMaritime import√©")
        
        # Test cr√©ation DashboardViewMaritime
        print("üîÑ Cr√©ation DashboardViewMaritime...")
        dashboard_view = DashboardViewMaritime(parent=None)
        print("‚úÖ DashboardViewMaritime cr√©√©e")
        
        # Test affichage
        print("üîÑ Affichage DashboardViewMaritime...")
        dashboard_view.show()
        
        visible = dashboard_view.isVisible()
        print(f"‚úÖ DashboardViewMaritime visible: {visible}")
        
        if visible:
            print("üéâ SUCC√àS: DashboardViewMaritime visible!")
            
            # Maintenir ouvert 5 secondes
            timer = QTimer()
            timer.timeout.connect(app.quit)
            timer.start(5000)
            
            print("üîÑ Maintien ouvert 5 secondes...")
            exit_code = app.exec()
            print(f"‚úÖ Test termin√© (code: {exit_code})")
            return True
        else:
            print("‚ùå PROBL√àME: DashboardViewMaritime non visible")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        traceback.print_exc()
        return False

if __name__ == "__main__":
    exit(0 if test_dashboard_view_fixed() else 1)
'''
    
    try:
        with open('test_dashboard_view_fixed.py', 'w', encoding='utf-8') as f:
            f.write(test_content)
        print("‚úÖ Test DashboardViewMaritime corrig√© cr√©√©: test_dashboard_view_fixed.py")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du test: {e}")
        return False

def main():
    """Point d'entr√©e principal"""
    print("üîß CORRECTEUR DASHBOARDVIEW")
    print("=" * 50)
    
    # Test d√©taill√© de cr√©ation DashboardViewMaritime
    if not test_dashboard_view_creation_detailed():
        print("‚ùå √âCHEC: Test cr√©ation DashboardViewMaritime")
        return 1
    
    # Corriger les imports probl√©matiques
    if not fix_dashboard_view_imports():
        print("‚ùå √âCHEC: Correction imports DashboardViewMaritime")
        return 1
    
    # Cr√©er test DashboardViewMaritime corrig√©
    if not create_test_dashboard_view_fixed():
        print("‚ùå √âCHEC: Cr√©ation test DashboardViewMaritime corrig√©")
        return 1
    
    print("\nüéâ CORRECTION DASHBOARDVIEW TERMIN√âE!")
    print("‚úÖ Imports DashboardViewMaritime corrig√©s")
    print("‚úÖ Test DashboardViewMaritime corrig√© cr√©√©: test_dashboard_view_fixed.py")
    
    print("\nüöÄ COMMANDES DE TEST:")
    print("1. Test DashboardViewMaritime corrig√©: python test_dashboard_view_fixed.py")
    print("2. Test MainWindow s√ªr: python test_main_window_safe.py")
    print("3. Lancement application: python main.py")
    
    return 0

if __name__ == "__main__":
    exit(main()) 