#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Correction de la boucle d'√©v√©nements dans MainWindow
"""

import sys
from pathlib import Path

# Ajouter le chemin du projet
sys.path.insert(0, str(Path(__file__).parent / "src"))

def fix_main_window_events():
    """Corriger le probl√®me de boucle d'√©v√©nements dans MainWindow"""
    print("üîß CORRECTION BOUCLE √âV√âNEMENTS MAINWINDOW")
    print("=" * 50)
    
    try:
        # Lire le fichier main_window.py
        main_window_path = Path("src/hrneowave/gui/main_window.py")
        
        if not main_window_path.exists():
            print(f"‚ùå Fichier non trouv√©: {main_window_path}")
            return False
        
        with open(main_window_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        print("‚úÖ Fichier main_window.py lu")
        
        # Cr√©er une sauvegarde
        backup_path = main_window_path.with_suffix('.py.backup_events')
        with open(backup_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"‚úÖ Sauvegarde cr√©√©e: {backup_path}")
        
        # Ajouter une m√©thode show_and_exec
        show_exec_method = '''
    def show_and_exec(self):
        """Afficher la fen√™tre et lancer la boucle d'√©v√©nements"""
        self.show()
        self.raise_()
        self.activateWindow()
        
        # V√©rifier la visibilit√©
        visible = self.isVisible()
        print(f"‚úÖ MainWindow visible: {visible}")
        
        if not visible:
            print("‚ö†Ô∏è Fen√™tre non visible, tentative de correction...")
            self.showNormal()
            self.show()
            visible = self.isVisible()
            print(f"‚úÖ MainWindow visible apr√®s correction: {visible}")
        
        print("‚úÖ Interface affich√©e avec succ√®s")
        print("üéâ CHNeoWave est maintenant op√©rationnel !")
        
        # Lancer la boucle d'√©v√©nements
        app = QApplication.instance()
        if app:
            return app.exec()
        return 0
'''
        
        # Trouver la fin de la classe MainWindow
        class_end = content.find("if __name__ == \"__main__\":")
        if class_end == -1:
            class_end = len(content)
        
        # Ins√©rer la m√©thode avant la fin de la classe
        before_class_end = content[:class_end]
        after_class_end = content[class_end:]
        
        # Ajouter la m√©thode
        content = before_class_end + show_exec_method + after_class_end
        
        # √âcrire le fichier modifi√©
        with open(main_window_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ M√©thode show_and_exec ajout√©e √† MainWindow")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la modification: {e}")
        return False

def create_test_main_window_events():
    """Cr√©er un test pour MainWindow avec boucle d'√©v√©nements"""
    print("\nüîß CR√âATION TEST MAINWINDOW √âV√âNEMENTS")
    print("=" * 40)
    
    test_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test MainWindow avec boucle d'√©v√©nements
"""

import sys
import traceback
from pathlib import Path

# Ajouter le chemin du projet
sys.path.insert(0, str(Path(__file__).parent / "src"))

def test_main_window_events():
    """Test MainWindow avec boucle d'√©v√©nements"""
    print("üöÄ TEST MAINWINDOW √âV√âNEMENTS")
    print("=" * 50)
    
    try:
        from PySide6.QtWidgets import QApplication
        from PySide6.QtCore import Qt, QTimer
        
        # Cr√©er QApplication
        app = QApplication.instance()
        if app is None:
            app = QApplication(sys.argv)
            app.setApplicationName("CHNeoWave Events Test")
        
        print("‚úÖ QApplication cr√©√©")
        
        # Test import MainWindow
        print("üîÑ Import MainWindow...")
        from hrneowave.gui.main_window import MainWindow
        print("‚úÖ MainWindow import√©")
        
        # Test cr√©ation MainWindow
        print("üîÑ Cr√©ation MainWindow...")
        main_window = MainWindow()
        print("‚úÖ MainWindow cr√©√©e")
        
        # Configuration de l'affichage
        main_window.setWindowTitle("CHNeoWave - Test √âv√©nements")
        main_window.resize(1200, 800)
        
        # Centrer la fen√™tre
        screen = app.primaryScreen()
        screen_geometry = screen.geometry()
        window_geometry = main_window.geometry()
        
        x = (screen_geometry.width() - window_geometry.width()) // 2
        y = (screen_geometry.height() - window_geometry.height()) // 2
        main_window.move(x, y)
        
        print("‚úÖ Fen√™tre configur√©e et centr√©e")
        
        # Test affichage avec boucle d'√©v√©nements
        print("üîÑ Affichage MainWindow avec boucle d'√©v√©nements...")
        
        # Utiliser la nouvelle m√©thode show_and_exec
        exit_code = main_window.show_and_exec()
        
        print(f"‚úÖ Test termin√© (code: {exit_code})")
        return True
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        traceback.print_exc()
        return False

if __name__ == "__main__":
    exit(0 if test_main_window_events() else 1)
'''
    
    try:
        with open('test_main_window_events.py', 'w', encoding='utf-8') as f:
            f.write(test_content)
        print("‚úÖ Test MainWindow √©v√©nements cr√©√©: test_main_window_events.py")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du test: {e}")
        return False

def create_main_with_events():
    """Cr√©er un main.py avec boucle d'√©v√©nements"""
    print("\nüîß CR√âATION MAIN.PY AVEC √âV√âNEMENTS")
    print("=" * 40)
    
    main_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CHNeoWave - Application principale avec boucle d'√©v√©nements
Version: 1.1.0
"""

import sys
import logging
import traceback
from pathlib import Path

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('src/hrneowave/chneowave_debug.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger('chneowave')

def main():
    """Point d'entr√©e principal de l'application"""
    try:
        print("üöÄ Lancement de CHNeoWave v1.1.0")
        print("=" * 50)
        
        # Ajouter le chemin du projet
        sys.path.insert(0, str(Path(__file__).parent / "src"))
        
        print("üìã √âTAPE 1: Cr√©ation QApplication")
        print("-" * 30)
        
        # Import et cr√©ation de QApplication
        from PySide6.QtWidgets import QApplication
        from PySide6.QtCore import Qt, QTimer
        
        # Cr√©er QApplication
        app = QApplication.instance()
        if app is None:
            app = QApplication(sys.argv)
            app.setApplicationName("CHNeoWave")
            app.setApplicationVersion("1.1.0")
            app.setOrganizationName("CHNeoWave")
        
        print("‚úÖ QApplication cr√©√©")
        
        print("üìã √âTAPE 2: Application du th√®me")
        print("-" * 30)
        
        # Application du th√®me (simplifi√©e)
        try:
            from hrneowave.gui.styles.theme_manager import ThemeManager
            theme_manager = ThemeManager(app=app)
            theme_manager.apply_theme('maritime_modern')
            print("‚úÖ Th√®me 'maritime_modern' appliqu√© avec succ√®s")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de l'application du th√®me: {e}")
            print("‚ö†Ô∏è Continuation sans th√®me...")
        
        print("‚úÖ Th√®me maritime appliqu√©")
        
        print("üìã √âTAPE 3: Cr√©ation MainWindow")
        print("-" * 30)
        
        # Import et cr√©ation de MainWindow
        print("üîÑ Import de MainWindow...")
        from hrneowave.gui.main_window import MainWindow
        print("‚úÖ MainWindow import√©")
        
        print("üîÑ Cr√©ation de l'instance MainWindow...")
        main_window = MainWindow()
        print("‚úÖ MainWindow cr√©√©e")
        
        print("üìã √âTAPE 4: Configuration de l'affichage")
        print("-" * 30)
        
        # Configuration de l'affichage
        main_window.setWindowTitle("CHNeoWave - Interface Maritime")
        main_window.resize(1200, 800)
        
        # Centrer la fen√™tre
        screen = app.primaryScreen()
        screen_geometry = screen.geometry()
        window_geometry = main_window.geometry()
        
        x = (screen_geometry.width() - window_geometry.width()) // 2
        y = (screen_geometry.height() - window_geometry.height()) // 2
        main_window.move(x, y)
        
        print("‚úÖ Fen√™tre configur√©e et centr√©e")
        
        print("üìã √âTAPE 5: Affichage avec boucle d'√©v√©nements")
        print("-" * 30)
        
        # Utiliser la m√©thode show_and_exec
        exit_code = main_window.show_and_exec()
        
        print(f"‚úÖ Application termin√©e (code: {exit_code})")
        return exit_code
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de MainWindow: {e}")
        print("üîç Traceback complet:")
        traceback.print_exc()
        print(f"‚ùå ERREUR CRITIQUE: {e}")
        print("üîç Traceback complet:")
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    exit(main())
'''
    
    try:
        with open('main_with_events.py', 'w', encoding='utf-8') as f:
            f.write(main_content)
        print("‚úÖ main_with_events.py cr√©√©")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation: {e}")
        return False

def main():
    """Point d'entr√©e principal"""
    print("üîß CORRECTEUR BOUCLE √âV√âNEMENTS")
    print("=" * 50)
    
    # Corriger MainWindow
    if not fix_main_window_events():
        print("‚ùå √âCHEC: Correction MainWindow")
        return 1
    
    # Cr√©er test MainWindow √©v√©nements
    if not create_test_main_window_events():
        print("‚ùå √âCHEC: Cr√©ation test MainWindow √©v√©nements")
        return 1
    
    # Cr√©er main avec √©v√©nements
    if not create_main_with_events():
        print("‚ùå √âCHEC: Cr√©ation main avec √©v√©nements")
        return 1
    
    print("\nüéâ CORRECTION BOUCLE √âV√âNEMENTS TERMIN√âE!")
    print("‚úÖ M√©thode show_and_exec ajout√©e √† MainWindow")
    print("‚úÖ Test MainWindow √©v√©nements cr√©√©: test_main_window_events.py")
    print("‚úÖ main_with_events.py cr√©√©")
    
    print("\nüöÄ COMMANDES DE TEST:")
    print("1. Test MainWindow √©v√©nements: python test_main_window_events.py")
    print("2. Lancement avec √©v√©nements: python main_with_events.py")
    
    return 0

if __name__ == "__main__":
    exit(main()) 