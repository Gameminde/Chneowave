#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de correction sp√©cifique pour le probl√®me de lancement CHNeoWave
Corrige le probl√®me o√π l'application se lance mais ne s'affiche pas
"""

import sys
import os
import re
import shutil
from pathlib import Path

class CHNeoWaveLaunchFixer:
    """Correcteur sp√©cifique pour les probl√®mes de lancement"""
    
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root)
        self.src_path = self.project_root / "src" / "hrneowave"
        self.fixes_applied = []
        self.errors = []
    
    def fix_main_py(self):
        """Corrige le fichier main.py pour assurer l'affichage"""
        print("üîß Correction du fichier main.py...")
        
        file_path = self.project_root / "main.py"
        
        if not file_path.exists():
            print(f"‚ö†Ô∏è Fichier non trouv√©: {file_path}")
            return
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # V√©rifier si les corrections sont d√©j√† pr√©sentes
            if "app.exec()" in content and "main_window.show()" in content:
                print("‚úÖ Corrections d√©j√† pr√©sentes dans main.py")
                return
            
            # Cr√©er une version corrig√©e du main.py
            corrected_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CHNeoWave - Point d'entr√©e principal CORRIG√â
Logiciel d'acquisition et d'analyse de houle pour laboratoires maritimes

Version 1.1.0 - Interface refactoris√©e avec flux s√©quentiel
Flux : Accueil -> Calibration -> Acquisition -> Analyse
"""

import sys
import logging
from pathlib import Path

# Configuration du logging centralis√©e
from hrneowave.core.logging_config import setup_logging
setup_logging()

log = logging.getLogger(__name__)

# --- Importations Centralis√©es PySide6 ---
from PySide6.QtWidgets import QApplication
from PySide6.QtCore import Qt, QObject, Signal

def main():
    """
    Point d'entr√©e principal de l'application CHNeoWave.
    Initialise et lance l'interface graphique.
    """
    print("üöÄ Lancement de CHNeoWave v1.1.0")
    print("=" * 50)
    
    log.info(f"Lancement de CHNeoWave v1.1.0")
    
    # CR√âATION QAPPLICATION
    app = QApplication(sys.argv)
    app.setApplicationName("CHNeoWave")
    app.setApplicationVersion("1.1.0")
    app.setOrganizationName("Laboratoire d'Hydrodynamique Maritime")
    app.setQuitOnLastWindowClosed(True)
    
    print("‚úÖ QApplication cr√©√©")

    try:
        # TH√àME
        log.info("Initialisation du gestionnaire de th√®mes...")
        from hrneowave.gui.styles.theme_manager import ThemeManager
        theme_manager = ThemeManager(app)
        theme_manager.apply_theme('maritime_modern')
        print("‚úÖ Th√®me maritime appliqu√©")

        # CR√âATION MAINWINDOW
        log.info("Cr√©ation de la fen√™tre principale...")
        from hrneowave.gui.main_window import MainWindow
        
        main_window = MainWindow()
        log.info("MainWindow cr√©√©e avec succ√®s")
        print("‚úÖ MainWindow cr√©√©e")
        
        # AFFICHAGE CRITIQUE
        log.info("Affichage de la fen√™tre principale.")
        print("üñ•Ô∏è Affichage de l'interface...")
        
        # FORCER L'AFFICHAGE
        main_window.show()
        main_window.raise_()
        main_window.activateWindow()
        
        # FORCER L'√âTAT DE LA FEN√äTRE
        main_window.setWindowState(
            main_window.windowState() & ~Qt.WindowMinimized | Qt.WindowActive
        )
        
        # V√âRIFICATIONS DE S√âCURIT√â
        if not main_window.isVisible():
            log.warning("La fen√™tre n'est pas visible, tentative de maximisation...")
            main_window.showMaximized()
            print("‚ö†Ô∏è Tentative de maximisation...")
        
        # V√âRIFICATIONS D√âTAILL√âES
        visible = main_window.isVisible()
        active = main_window.isActiveWindow()
        minimized = main_window.isMinimized()
        
        log.info(f"Fen√™tre visible: {visible}, Taille: {main_window.size()}")
        log.info(f"Position de la fen√™tre: {main_window.pos()}")
        log.info(f"√âtat de la fen√™tre: Active={active}, Minimized={minimized}")
        
        print(f"‚úÖ Fen√™tre visible: {visible}")
        print(f"‚úÖ Position: {main_window.pos()}")
        print(f"‚úÖ Taille: {main_window.size()}")
        
        if visible:
            print("üéâ SUCC√àS: CHNeoWave est visible √† l'√©cran!")
            print("üëÄ L'interface devrait maintenant √™tre affich√©e")
        else:
            print("‚ùå PROBL√àME: CHNeoWave n'est pas visible")
            return 1
        
        # BOUCLE D'√âV√âNEMENTS
        log.info("D√©marrage de la boucle d'√©v√©nements de l'application.")
        print("üîÑ D√©marrage de la boucle d'√©v√©nements...")
        
        exit_code = app.exec()
        
        log.info(f"Application termin√©e avec le code de sortie: {exit_code}")
        print(f"‚úÖ CHNeoWave ferm√© (code: {exit_code})")
        return exit_code
        
    except Exception as e:
        log.critical(f"Une erreur critique a emp√™ch√© le lancement de l'application: {e}", exc_info=True)
        print(f"‚ùå ERREUR CRITIQUE: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main())
'''
            
            # Sauvegarder l'ancien fichier
            backup_path = file_path.with_suffix('.py.backup')
            shutil.copy2(file_path, backup_path)
            
            # √âcrire le nouveau contenu
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(corrected_content)
            
            self.fixes_applied.append(f"Fichier main.py corrig√©")
            print("‚úÖ main.py corrig√© avec succ√®s")
            
        except Exception as e:
            error_msg = f"Erreur lors de la correction main.py: {e}"
            self.errors.append(error_msg)
            print(f"‚ùå {error_msg}")
    
    def fix_main_window_imports(self):
        """Corrige les imports dans main_window.py"""
        print("üîß Correction des imports dans main_window.py...")
        
        file_path = self.src_path / "gui" / "main_window.py"
        
        if not file_path.exists():
            print(f"‚ö†Ô∏è Fichier non trouv√©: {file_path}")
            return
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # V√©rifier si les imports sont corrects
            if "from PySide6.QtWidgets import QMainWindow" in content:
                print("‚úÖ Imports d√©j√† corrects dans main_window.py")
                return
            
            # Ajouter les imports manquants si n√©cessaire
            import_pattern = r"from PySide6\.QtWidgets import ([^,\n]+)"
            if "QMainWindow" not in content:
                # Ajouter QMainWindow √† l'import existant
                new_content = re.sub(
                    import_pattern,
                    r"from PySide6.QtWidgets import QMainWindow, \1",
                    content
                )
                
                if new_content != content:
                    # Sauvegarder
                    backup_path = file_path.with_suffix('.py.backup')
                    shutil.copy2(file_path, backup_path)
                    
                    # √âcrire
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(new_content)
                    
                    self.fixes_applied.append(f"Imports corrig√©s dans main_window.py")
                    print("‚úÖ Imports corrig√©s dans main_window.py")
                else:
                    print("‚ö†Ô∏è Aucune correction d'import n√©cessaire")
            
        except Exception as e:
            error_msg = f"Erreur lors de la correction des imports: {e}"
            self.errors.append(error_msg)
            print(f"‚ùå {error_msg}")
    
    def fix_theme_manager(self):
        """Corrige le ThemeManager pour √©viter les erreurs"""
        print("üîß Correction du ThemeManager...")
        
        file_path = self.src_path / "gui" / "styles" / "theme_manager.py"
        
        if not file_path.exists():
            print(f"‚ö†Ô∏è Fichier non trouv√©: {file_path}")
            return
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # V√©rifier si les corrections sont d√©j√† pr√©sentes
            if "try:" in content and "except Exception" in content:
                print("‚úÖ ThemeManager d√©j√† prot√©g√© contre les erreurs")
                return
            
            # Ajouter une protection contre les erreurs
            apply_theme_pattern = r"def apply_theme\(self, theme_name: str\):"
            protected_apply_theme = '''def apply_theme(self, theme_name: str):
        """Applique un th√®me avec protection contre les erreurs"""
        try:
            # Code existant...
            if theme_name in self.available_themes:
                self.current_theme = theme_name
                self._load_and_apply_theme(theme_name)
                print(f"‚úÖ Th√®me '{theme_name}' appliqu√© avec succ√®s")
            else:
                print(f"‚ö†Ô∏è Th√®me '{theme_name}' non trouv√©, utilisation du th√®me par d√©faut")
                self._load_and_apply_theme('maritime_modern')
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de l'application du th√®me '{theme_name}': {e}")
            # Utiliser le th√®me par d√©faut en cas d'erreur
            try:
                self._load_and_apply_theme('maritime_modern')
            except:
                print("‚ö†Ô∏è Impossible d'appliquer le th√®me par d√©faut")
'''
            
            # Remplacer la m√©thode apply_theme
            new_content = re.sub(apply_theme_pattern, protected_apply_theme, content)
            
            if new_content != content:
                # Sauvegarder
                backup_path = file_path.with_suffix('.py.backup')
                shutil.copy2(file_path, backup_path)
                
                # √âcrire
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(new_content)
                
                self.fixes_applied.append(f"ThemeManager prot√©g√© contre les erreurs")
                print("‚úÖ ThemeManager corrig√©")
            else:
                print("‚ö†Ô∏è Aucune correction ThemeManager n√©cessaire")
            
        except Exception as e:
            error_msg = f"Erreur lors de la correction ThemeManager: {e}"
            self.errors.append(error_msg)
            print(f"‚ùå {error_msg}")
    
    def create_simple_test_script(self):
        """Cr√©e un script de test simple pour v√©rifier le lancement"""
        print("üîß Cr√©ation d'un script de test simple...")
        
        test_script = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de test simple pour CHNeoWave
"""

import sys
from pathlib import Path

# Ajouter le chemin du projet
sys.path.insert(0, str(Path(__file__).parent / "src"))

from PySide6.QtWidgets import QApplication, QMainWindow, QLabel, QVBoxLayout, QWidget
from PySide6.QtCore import Qt, QTimer

def test_simple_launch():
    """Test de lancement simple"""
    print("üß™ Test de lancement simple CHNeoWave")
    
    app = QApplication(sys.argv)
    
    # Fen√™tre simple
    window = QMainWindow()
    window.setWindowTitle("CHNeoWave - Test Simple")
    window.setGeometry(200, 200, 600, 400)
    
    # Widget central
    central_widget = QWidget()
    layout = QVBoxLayout(central_widget)
    
    # Label
    label = QLabel("CHNeoWave - Test de Lancement")
    label.setAlignment(Qt.AlignCenter)
    layout.addWidget(label)
    
    window.setCentralWidget(central_widget)
    
    # Affichage
    window.show()
    window.raise_()
    window.activateWindow()
    
    print(f"‚úÖ Fen√™tre cr√©√©e: Visible={window.isVisible()}")
    
    # Timer pour fermer
    timer = QTimer()
    timer.timeout.connect(app.quit)
    timer.start(3000)
    
    print("üîÑ D√©marrage boucle d'√©v√©nements...")
    exit_code = app.exec()
    print(f"‚úÖ Test termin√© (code: {exit_code})")
    return exit_code

if __name__ == "__main__":
    exit(test_simple_launch())
'''
        
        test_file = self.project_root / "test_simple_launch.py"
        with open(test_file, 'w', encoding='utf-8') as f:
            f.write(test_script)
        
        self.fixes_applied.append(f"Script de test simple cr√©√©: {test_file}")
        print(f"‚úÖ Script de test cr√©√©: {test_file}")
    
    def fix_all_launch_issues(self):
        """Applique toutes les corrections de lancement"""
        print("üîß CORRECTION DES PROBL√àMES DE LANCEMENT CHNEOWAVE")
        print("=" * 60)
        
        try:
            # Phase 1: Corrections critiques
            print("\nüìã PHASE 1: Corrections critiques...")
            self.fix_main_py()
            self.fix_main_window_imports()
            
            # Phase 2: Corrections de robustesse
            print("\nüìã PHASE 2: Corrections de robustesse...")
            self.fix_theme_manager()
            
            # Phase 3: Outils de test
            print("\nüìã PHASE 3: Outils de test...")
            self.create_simple_test_script()
            
            # Rapport final
            self.generate_fix_report()
            
            return len(self.errors) == 0
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la correction: {e}")
            return False
    
    def generate_fix_report(self):
        """G√©n√®re un rapport des corrections appliqu√©es"""
        print("\nüìä RAPPORT DE CORRECTION DE LANCEMENT")
        print("=" * 50)
        
        if self.fixes_applied:
            print(f"‚úÖ {len(self.fixes_applied)} corrections appliqu√©es:")
            for fix in self.fixes_applied:
                print(f"  ‚Ä¢ {fix}")
        else:
            print("‚ö†Ô∏è Aucune correction appliqu√©e")
        
        if self.errors:
            print(f"\n‚ùå {len(self.errors)} erreurs rencontr√©es:")
            for error in self.errors:
                print(f"  ‚Ä¢ {error}")
        
        print(f"\nüìà R√âSULTAT: {'SUCC√àS' if len(self.errors) == 0 else '√âCHEC'}")
        
        # Instructions de test
        print("\nüß™ INSTRUCTIONS DE TEST:")
        print("1. Test simple: python test_simple_launch.py")
        print("2. Test complet: python main.py")
        print("3. Diagnostic: python debug_launch_detailed.py")

def main():
    """Point d'entr√©e principal"""
    print("üöÄ CORRECTEUR DE LANCEMENT CHNEOWAVE")
    print("=" * 50)
    
    # Cr√©er le correcteur
    fixer = CHNeoWaveLaunchFixer()
    
    # Appliquer toutes les corrections
    success = fixer.fix_all_launch_issues()
    
    if success:
        print("\nüéâ CORRECTION TERMIN√âE AVEC SUCC√àS!")
        print("‚úÖ Tous les probl√®mes de lancement ont √©t√© corrig√©s")
        print("üöÄ CHNeoWave devrait maintenant se lancer correctement")
    else:
        print("\n‚ö†Ô∏è CORRECTION TERMIN√âE AVEC DES ERREURS")
        print("‚ùå Certains probl√®mes n'ont pas pu √™tre corrig√©s")
        print("üìã Consultez le rapport pour plus de d√©tails")
    
    return 0 if success else 1

if __name__ == "__main__":
    exit(main()) 