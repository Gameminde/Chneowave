#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test MainWindow CHNeoWave apr√®s correction de la logique des widgets
"""

import sys
import os

# Ajouter le r√©pertoire src au path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from PySide6.QtWidgets import QApplication
from PySide6.QtCore import QTimer

def test_mainwindow_corrigee():
    """Test de la MainWindow apr√®s correction de la logique des widgets"""
    print("üîç === TEST MAINWINDOW CORRIG√âE ===")
    
    # Cr√©er l'application Qt
    app = QApplication(sys.argv)
    print("‚úÖ QApplication cr√©√©e")
    
    try:
        # Importer et cr√©er MainWindow
        from hrneowave.gui.main_window import MainWindow
        print("‚úÖ Import MainWindow r√©ussi")
        
        # Cr√©er la fen√™tre principale
        window = MainWindow()
        print("‚úÖ MainWindow cr√©√©e")
        
        # V√©rifier l'√©tat de la fen√™tre
        print(f"‚úÖ Visible: {window.isVisible()}")
        print(f"‚úÖ G√©om√©trie: {window.geometry()}")
        print(f"‚úÖ Actif: {window.isActiveWindow()}")
        
        # Forcer l'affichage
        window.show()
        window.raise_()
        window.activateWindow()
        
        print("‚úÖ MainWindow affich√©e avec succ√®s")
        print(f"‚úÖ Visible apr√®s show(): {window.isVisible()}")
        
        # Timer pour fermer automatiquement apr√®s 10 secondes
        def close_app():
            print("‚è∞ Fermeture automatique apr√®s 10 secondes")
            window.close()
            app.quit()
        
        QTimer.singleShot(10000, close_app)
        
        # Lancer la boucle d'√©v√©nements
        print("üöÄ Lancement de la boucle d'√©v√©nements...")
        return app.exec()
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    exit_code = test_mainwindow_corrigee()
    print(f"üèÅ Test termin√© avec code: {exit_code}")
    sys.exit(exit_code)