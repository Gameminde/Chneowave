#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test MainWindow en d√©sactivant temporairement tout CSS embedded
"""

import sys
import os
from pathlib import Path

# Ajouter le chemin src au PYTHONPATH
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

def patch_setStyleSheet():
    """Patch temporaire pour d√©sactiver setStyleSheet"""
    from PySide6.QtWidgets import QWidget
    
    # Sauvegarder la m√©thode originale
    original_setStyleSheet = QWidget.setStyleSheet
    
    def dummy_setStyleSheet(self, stylesheet):
        """Version dummy qui ne fait rien"""
        # Ne fait rien - ignore tous les CSS
        pass
    
    # Remplacer temporairement
    QWidget.setStyleSheet = dummy_setStyleSheet
    
    return original_setStyleSheet

def restore_setStyleSheet(original_method):
    """Restaure la m√©thode setStyleSheet originale"""
    from PySide6.QtWidgets import QWidget
    QWidget.setStyleSheet = original_method

def test_mainwindow_without_css():
    """Test MainWindow sans aucun CSS embedded"""
    print("=== TEST MAINWINDOW SANS CSS EMBEDDED ===")
    
    try:
        from PySide6.QtWidgets import QApplication
        from PySide6.QtCore import QTimer
        from hrneowave.core.logging_config import setup_logging
        
        # Configuration logging
        setup_logging()
        print("‚úÖ Logging configur√©")
        
        # Cr√©ation QApplication
        app = QApplication(sys.argv)
        app.setApplicationName("CHNeoWave Sans CSS Embedded")
        print("‚úÖ QApplication cr√©√©e")
        
        # PATCH: D√©sactiver temporairement setStyleSheet
        print("üîß D√©sactivation temporaire de setStyleSheet...")
        original_setStyleSheet = patch_setStyleSheet()
        
        try:
            # Import MainWindow
            from hrneowave.gui.main_window import MainWindow
            print("‚úÖ MainWindow import√©e")
            
            # Cr√©ation MainWindow
            print("Cr√©ation de MainWindow sans CSS...")
            main_window = MainWindow()
            print("‚úÖ MainWindow cr√©√©e avec succ√®s!")
            
            # Configuration basique
            main_window.setWindowTitle("CHNeoWave - Test Sans CSS Embedded")
            main_window.setGeometry(200, 200, 1200, 800)
            
            # Restaurer setStyleSheet avant affichage
            print("üîß Restauration de setStyleSheet...")
            restore_setStyleSheet(original_setStyleSheet)
            
            # Affichage
            print("Affichage de MainWindow...")
            main_window.show()
            main_window.raise_()
            main_window.activateWindow()
            
            # V√©rifications
            print(f"‚úÖ MainWindow visible: {main_window.isVisible()}")
            print(f"‚úÖ Taille: {main_window.size()}")
            print(f"‚úÖ Position: {main_window.pos()}")
            print(f"‚úÖ Titre: {main_window.windowTitle()}")
            
            if main_window.isVisible():
                print("\nüéâ SUCC√àS! MainWindow s'affiche sans CSS embedded")
                print("Le probl√®me vient du CSS embedded malform√©")
            else:
                print("\n‚ö†Ô∏è MainWindow cr√©√©e mais pas visible")
            
            # Timer pour fermer apr√®s 10 secondes
            timer = QTimer()
            timer.timeout.connect(app.quit)
            timer.start(10000)
            
            print("\nInterface affich√©e pendant 10 secondes...")
            print("(L'interface sera basique sans styles, c'est normal)")
            
            exit_code = app.exec()
            print(f"\n‚úÖ Application ferm√©e avec code: {exit_code}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå ERREUR pendant cr√©ation MainWindow: {e}")
            import traceback
            traceback.print_exc()
            
            # Restaurer setStyleSheet en cas d'erreur
            restore_setStyleSheet(original_setStyleSheet)
            return False
        
    except Exception as e:
        print(f"‚ùå ERREUR g√©n√©rale: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_identify_problematic_css():
    """Test pour identifier le CSS probl√©matique"""
    print("\n=== IDENTIFICATION CSS PROBL√âMATIQUE ===")
    
    try:
        from PySide6.QtWidgets import QApplication, QLabel
        
        app = QApplication.instance()
        if app is None:
            app = QApplication(sys.argv)
        
        # Test de diff√©rents CSS probl√©matiques connus
        problematic_css_tests = [
            {
                "name": "CSS avec accolade manquante",
                "css": """
                QPushButton#nav_button {
                    background-color: #00ACC1;
                    color: #F5FBFF;
                    border: none;
                    border-radius: 13px;
                    padding: 8px 13px;
    
                }
                """
            },
            {
                "name": "CSS avec propri√©t√© invalide",
                "css": """
                QLabel {
                    invalid-property: value;
                    color: #445868;
                }
                """
            },
            {
                "name": "CSS avec s√©lecteur invalide",
                "css": """
                QLabel[invalid-selector] {
                    color: #445868;
                }
                """
            }
        ]
        
        for test in problematic_css_tests:
            print(f"\nTest: {test['name']}")
            try:
                test_label = QLabel("Test")
                test_label.setStyleSheet(test['css'])
                print(f"‚úÖ CSS accept√©: {test['name']}")
                test_label.deleteLater()
            except Exception as e:
                print(f"‚ùå CSS rejet√©: {test['name']} - {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERREUR test CSS: {e}")
        return False

def main():
    """Fonction principale"""
    print("DIAGNOSTIC MAINWINDOW - CSS EMBEDDED")
    print("====================================")
    
    # Test 1: MainWindow sans CSS embedded
    success = test_mainwindow_without_css()
    
    if success:
        print("\n‚úÖ MainWindow fonctionne sans CSS embedded")
        print("Le probl√®me vient du CSS embedded malform√©")
        
        # Test 2: Identifier CSS probl√©matique
        test_identify_problematic_css()
        
        print("\nüîß SOLUTION:")
        print("1. Corriger le CSS malform√© dans main_sidebar.py")
        print("2. Externaliser tout le CSS embedded vers des fichiers .qss")
        print("3. Valider la syntaxe CSS avant application")
        
        return 0
    else:
        print("\n‚ùå MainWindow ne peut pas se cr√©er m√™me sans CSS")
        print("Le probl√®me est plus profond que le CSS")
        return 1

if __name__ == "__main__":
    sys.exit(main())