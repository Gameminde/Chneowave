#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test √©tape par √©tape ultra-s√©curis√©
"""

import sys
import os
from pathlib import Path

# Ajouter le chemin src au PYTHONPATH
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

def test_step_1_pyside6():
    """Test 1: Import PySide6"""
    print("=== √âTAPE 1: IMPORT PYSIDE6 ===")
    try:
        from PySide6.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QLabel
        from PySide6.QtCore import QTimer
        print("‚úÖ PySide6 import√© avec succ√®s")
        return True
    except Exception as e:
        print(f"‚ùå Erreur import PySide6: {e}")
        return False

def test_step_2_qapplication():
    """Test 2: Cr√©ation QApplication"""
    print("\n=== √âTAPE 2: CR√âATION QAPPLICATION ===")
    try:
        from PySide6.QtWidgets import QApplication
        app = QApplication.instance()
        if app is None:
            app = QApplication(sys.argv)
        print("‚úÖ QApplication cr√©√©e avec succ√®s")
        return True, app
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation QApplication: {e}")
        return False, None

def test_step_3_logging():
    """Test 3: Configuration logging"""
    print("\n=== √âTAPE 3: CONFIGURATION LOGGING ===")
    try:
        from hrneowave.core.logging_config import setup_logging
        setup_logging()
        print("‚úÖ Logging configur√© avec succ√®s")
        return True
    except Exception as e:
        print(f"‚ùå Erreur configuration logging: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_step_4_theme_manager():
    """Test 4: ThemeManager"""
    print("\n=== √âTAPE 4: THEME MANAGER ===")
    try:
        from PySide6.QtWidgets import QApplication
        app = QApplication.instance()
        
        from hrneowave.gui.styles.theme_manager import ThemeManager
        print("‚úÖ ThemeManager import√©")
        
        theme_manager = ThemeManager(app)
        print("‚úÖ ThemeManager cr√©√©")
        
        theme_manager.apply_theme('maritime_modern')
        print("‚úÖ Th√®me maritime_modern appliqu√©")
        
        return True, theme_manager
    except Exception as e:
        print(f"‚ùå Erreur ThemeManager: {e}")
        import traceback
        traceback.print_exc()
        return False, None

def test_step_5_mainwindow_import():
    """Test 5: Import MainWindow"""
    print("\n=== √âTAPE 5: IMPORT MAINWINDOW ===")
    try:
        from hrneowave.gui.main_window import MainWindow
        print("‚úÖ MainWindow import√© avec succ√®s")
        return True
    except Exception as e:
        print(f"‚ùå Erreur import MainWindow: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_step_6_mainwindow_creation():
    """Test 6: Cr√©ation MainWindow"""
    print("\n=== √âTAPE 6: CR√âATION MAINWINDOW ===")
    try:
        from hrneowave.gui.main_window import MainWindow
        
        print("Appel constructeur MainWindow()...")
        main_window = MainWindow()
        print("‚úÖ MainWindow cr√©√© avec succ√®s")
        
        print("Configuration fen√™tre...")
        main_window.setWindowTitle("CHNeoWave - Test √âtapes")
        main_window.setGeometry(100, 100, 800, 600)
        print("‚úÖ MainWindow configur√©")
        
        return True, main_window
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation MainWindow: {e}")
        import traceback
        traceback.print_exc()
        return False, None

def test_step_7_mainwindow_display():
    """Test 7: Affichage MainWindow"""
    print("\n=== √âTAPE 7: AFFICHAGE MAINWINDOW ===")
    try:
        from PySide6.QtWidgets import QApplication
        from PySide6.QtCore import QTimer
        
        app = QApplication.instance()
        
        # R√©cup√©rer MainWindow depuis l'√©tape pr√©c√©dente
        success, main_window = test_step_6_mainwindow_creation()
        if not success:
            return False
        
        print("Affichage MainWindow...")
        main_window.show()
        main_window.raise_()
        main_window.activateWindow()
        print("‚úÖ Affichage demand√©")
        
        print(f"Visible: {main_window.isVisible()}")
        print(f"Taille: {main_window.size()}")
        print(f"Position: {main_window.pos()}")
        
        if main_window.isVisible():
            print("üéâ MainWindow visible avec succ√®s!")
            
            # Timer pour fermer apr√®s 3 secondes
            timer = QTimer()
            timer.timeout.connect(app.quit)
            timer.start(3000)
            
            print("Interface affich√©e pendant 3 secondes...")
            exit_code = app.exec()
            print(f"Application ferm√©e avec code: {exit_code}")
            
            return True
        else:
            print("‚ùå MainWindow cr√©√© mais pas visible")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur affichage MainWindow: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Test principal √©tape par √©tape"""
    print("TEST MAINWINDOW - √âTAPES S√âCURIS√âES")
    print("====================================")
    
    # √âtape 1: PySide6
    if not test_step_1_pyside6():
        return 1
    
    # √âtape 2: QApplication
    success, app = test_step_2_qapplication()
    if not success:
        return 1
    
    # √âtape 3: Logging
    if not test_step_3_logging():
        print("‚ö†Ô∏è Logging √©chou√©, mais on continue...")
    
    # √âtape 4: ThemeManager
    success, theme_manager = test_step_4_theme_manager()
    if not success:
        print("‚ö†Ô∏è ThemeManager √©chou√©, mais on continue...")
    
    # √âtape 5: Import MainWindow
    if not test_step_5_mainwindow_import():
        return 1
    
    # √âtape 6 et 7: Cr√©ation et affichage MainWindow
    if test_step_7_mainwindow_display():
        print("\nüéâ TOUS LES TESTS R√âUSSIS!")
        return 0
    else:
        print("\n‚ùå √âCHEC FINAL")
        return 1

if __name__ == "__main__":
    sys.exit(main())