#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de diagnostic CORRIG√â pour CHNeoWave
Probl√®me identifi√© : Conflit QApplication singleton
"""

import sys
import logging
from PySide6.QtWidgets import QApplication, QMainWindow, QLabel, QVBoxLayout, QWidget
from PySide6.QtCore import Qt, QTimer
from PySide6.QtGui import QFont

# Configuration logging simple
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
log = logging.getLogger(__name__)

def test_chneowave_complete():
    """Test complet CHNeoWave avec une seule instance QApplication"""
    print("üîç DIAGNOSTIC CHNEOWAVE - VERSION CORRIG√âE")
    print("=" * 50)
    
    # UNE SEULE instance QApplication
    app = QApplication(sys.argv)
    app.setApplicationName("CHNeoWave Debug")
    
    try:
        # Test imports
        print("üß™ TEST 1: Imports CHNeoWave")
        print("=" * 40)
        
        from hrneowave.core.logging_config import setup_logging
        setup_logging()
        print("‚úÖ Logging configur√©")
        
        from hrneowave.gui.styles.theme_manager import ThemeManager
        print("‚úÖ ThemeManager import√©")
        
        from hrneowave.gui.main_window import MainWindow
        print("‚úÖ MainWindow import√©")
        
        # Test ThemeManager
        print("\nüß™ TEST 2: ThemeManager")
        print("=" * 40)
        
        theme_manager = ThemeManager(app)
        theme_manager.apply_theme('maritime_modern')
        print("‚úÖ Th√®me 'maritime_modern' appliqu√©")
        
        # Test MainWindow
        print("\nüß™ TEST 3: MainWindow CHNeoWave")
        print("=" * 40)
        
        main_window = MainWindow()
        print("‚úÖ MainWindow cr√©√©e avec succ√®s")
        
        # Configuration d'affichage
        main_window.setWindowTitle("CHNeoWave - Test d'Affichage R√©ussi")
        
        # FORCER L'AFFICHAGE
        main_window.show()
        main_window.raise_()
        main_window.activateWindow()
        
        # V√©rifications
        print(f"‚úÖ MainWindow visible: {main_window.isVisible()}")
        print(f"‚úÖ Position: {main_window.pos()}")
        print(f"‚úÖ Taille: {main_window.size()}")
        print(f"‚úÖ Active: {main_window.isActiveWindow()}")
        print(f"‚úÖ Minimis√©e: {main_window.isMinimized()}")
        
        if main_window.isVisible():
            print("\nüéâ SUCC√àS TOTAL: CHNeoWave est VISIBLE √† l'√©cran!")
            print("‚úÖ Tous les composants fonctionnent correctement")
            print("‚úÖ L'interface s'affiche comme pr√©vu")
        else:
            print("\n‚ùå PROBL√àME: MainWindow cr√©√©e mais pas visible")
            return 1
        
        # Timer pour maintenir ouvert 20 secondes
        timer = QTimer()
        timer.timeout.connect(lambda: (
            print("‚è∞ Fermeture automatique dans 5 secondes..."),
            QTimer.singleShot(5000, app.quit)
        ))
        timer.start(15000)  # Avertissement √† 15s
        
        print("\nüöÄ CHNeoWave fonctionne - Fen√™tre ouverte pour 20 secondes")
        print("üëÄ Vous devriez voir l'interface CHNeoWave maintenant!")
        print("‚è∞ Fermeture automatique dans 20 secondes...")
        
        # D√©marrer la boucle d'√©v√©nements
        exit_code = app.exec()
        
        print(f"\n‚úÖ CHNeoWave ferm√© proprement (code: {exit_code})")
        return exit_code
        
    except Exception as e:
        print(f"\n‚ùå ERREUR CRITIQUE: {e}")
        import traceback
        traceback.print_exc()
        return 1

def main():
    """Point d'entr√©e principal"""
    return test_chneowave_complete()

if __name__ == "__main__":
    print("üöÄ LANCEMENT DIAGNOSTIC CHNEOWAVE CORRIG√â")
    print("=" * 60)
    print("Ce test va v√©rifier si CHNeoWave s'affiche correctement...")
    print("=" * 60)
    
    exit_code = main()
    
    if exit_code == 0:
        print("\nüéâ DIAGNOSTIC R√âUSSI: CHNeoWave fonctionne parfaitement!")
        print("‚úÖ L'interface s'affiche correctement")
        print("‚úÖ Tous les composants sont op√©rationnels")
        print("\nüí° SOLUTION: Utiliser une seule instance QApplication")
    else:
        print("\n‚ùå DIAGNOSTIC √âCHOU√â: Probl√®mes d√©tect√©s")
        print("üîß V√©rifiez les logs ci-dessus pour plus de d√©tails")
    
    sys.exit(exit_code)