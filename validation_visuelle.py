#!/usr/bin/env python3
"""
Validation visuelle du correctif pour l'√©cran gris de CHNeoWave
Ce script lance l'application et reste ouvert pour permettre la validation visuelle
"""

import sys
import os
from pathlib import Path

# Ajouter le r√©pertoire src au PYTHONPATH
project_root = Path(__file__).parent
src_path = project_root / "src"
sys.path.insert(0, str(src_path))

# Configuration du logging
from hrneowave.utils import setup_logging
setup_logging()

def main():
    """
    Lance CHNeoWave pour validation visuelle du correctif √©cran gris
    """
    print("=== VALIDATION VISUELLE CORRECTIF √âCRAN GRIS ===")
    print("Ce script lance CHNeoWave pour validation visuelle.")
    print("L'application devrait s'ouvrir avec l'interface visible (pas d'√©cran gris).")
    print("Fermez la fen√™tre pour terminer la validation.\n")
    
    # Import conditionnel de QApplication
    try:
        from PySide6.QtWidgets import QApplication
    except ImportError:
        try:
            from PyQt5.QtWidgets import QApplication
        except ImportError:
            print("‚ùå Erreur : Ni PySide6 ni PyQt5 ne sont disponibles")
            return 1
    
    app = QApplication(sys.argv)
    app.setApplicationName("CHNeoWave - Validation Visuelle")
    app.setApplicationVersion("1.0.0")
    app.setOrganizationName("Laboratoire Maritime")
    
    try:
        # Import des modules GUI
        from PySide6.QtWidgets import QMainWindow, QVBoxLayout, QWidget, QStackedWidget
        from PySide6.QtCore import Qt
        
        from hrneowave.gui.view_manager import get_view_manager
        from hrneowave.gui.controllers.main_controller import MainController
        from hrneowave.gui.theme import get_stylesheet
        
        # D√©finition de la classe de validation
        class ValidationWindow(QMainWindow):
            def __init__(self):
                super().__init__()
                self.setWindowTitle("CHNeoWave v1.0.0 - VALIDATION VISUELLE CORRECTIF √âCRAN GRIS")
                self.setMinimumSize(1200, 800)
                self.resize(1366, 768)
                
                # Application du th√®me
                self.setStyleSheet(get_stylesheet())
                
                # Configuration du widget central
                central_widget = QWidget()
                self.setCentralWidget(central_widget)
                
                # Layout principal
                layout = QVBoxLayout(central_widget)
                layout.setContentsMargins(0, 0, 0, 0)
                layout.setSpacing(0)
                
                # Cr√©ation du QStackedWidget
                self.stacked_widget = QStackedWidget()
                layout.addWidget(self.stacked_widget)
                
                # Cr√©ation du ViewManager
                self.view_manager = get_view_manager(self.stacked_widget)
                
                # Enregistrement des vues
                self.setup_views()
                
                # APPLICATION DU CORRECTIF √âCRAN GRIS
                self.apply_hotfix()
                
                # Cr√©ation du MainController
                default_config = {'log_level': 'INFO', 'theme': 'dark'}
                self.main_controller = MainController(self, default_config)
                
                # Centrage de la fen√™tre
                self._center_window()
                
                print("‚úÖ VALIDATION VISUELLE: Application lanc√©e avec correctif appliqu√©")
                print("üìã V√âRIFICATIONS √Ä EFFECTUER:")
                print("   1. La fen√™tre s'ouvre sans √©cran gris")
                print("   2. L'interface Welcome est visible")
                print("   3. Les √©l√©ments de l'interface sont correctement affich√©s")
                print("   4. Le th√®me sombre est appliqu√©")
                print("\nüîç Fermez la fen√™tre quand la validation est termin√©e.")
            
            def setup_views(self):
                """Enregistre les vues dans le ViewManager"""
                from hrneowave.gui.views.welcome_view import WelcomeView
                from hrneowave.gui.views.calibration_view import CalibrationView
                from hrneowave.gui.views.acquisition_view import AcquisitionView
                from hrneowave.gui.views.analysis_view import AnalysisView
                
                # Enregistrement des vues
                self.welcome_view = WelcomeView()
                self.view_manager.register_view("welcome", self.welcome_view)
                
                self.calibration_view = CalibrationView()
                self.view_manager.register_view("calibration", self.calibration_view)
                
                self.acquisition_view = AcquisitionView()
                self.view_manager.register_view("acquisition", self.acquisition_view)
                
                self.analysis_view = AnalysisView()
                self.view_manager.register_view("analysis", self.analysis_view)
                
                print(f"‚úì {self.stacked_widget.count()} vues enregistr√©es")
            
            def apply_hotfix(self):
                """Applique le correctif pour l'√©cran gris"""
                if self.stacked_widget.count() > 0:
                    # Forcer la visibilit√© du QStackedWidget
                    self.stacked_widget.setVisible(True)
                    self.stacked_widget.show()
                    self.stacked_widget.setAutoFillBackground(True)
                    
                    # Forcer l'index √† 0 et la visibilit√© du widget courant
                    self.stacked_widget.setCurrentIndex(0)
                    current_widget = self.stacked_widget.currentWidget()
                    if current_widget:
                        current_widget.setVisible(True)
                        current_widget.show()
                        current_widget.setAutoFillBackground(True)
                    
                    print(f"‚úÖ CORRECTIF APPLIQU√â: count={self.stacked_widget.count()}, visible={self.stacked_widget.isVisible()}")
                    
                    # Diagnostic d√©taill√©
                    print(f"üìä DIAGNOSTIC POST-CORRECTIF:")
                    print(f"   - QStackedWidget visible: {self.stacked_widget.isVisible()}")
                    print(f"   - QStackedWidget autoFillBackground: {self.stacked_widget.autoFillBackground()}")
                    print(f"   - Index courant: {self.stacked_widget.currentIndex()}")
                    if current_widget:
                        print(f"   - Widget courant visible: {current_widget.isVisible()}")
                        print(f"   - Widget courant autoFillBackground: {current_widget.autoFillBackground()}")
                        print(f"   - Type widget courant: {type(current_widget).__name__}")
            
            def _center_window(self):
                """Centre la fen√™tre sur l'√©cran"""
                screen = QApplication.primaryScreen().geometry()
                window = self.geometry()
                x = (screen.width() - window.width()) // 2
                y = (screen.height() - window.height()) // 2
                self.move(x, y)
        
        # Cr√©ation et affichage de la fen√™tre de validation
        validation_window = ValidationWindow()
        validation_window.show()
        
        # Lancement de la boucle d'√©v√©nements
        result = app.exec()
        
        print("\n‚úÖ VALIDATION VISUELLE TERMIN√âE")
        if result == 0:
            print("üéâ L'application s'est ferm√©e normalement")
        else:
            print(f"‚ö†Ô∏è  L'application s'est ferm√©e avec le code: {result}")
        
        return result
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la validation visuelle: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main())