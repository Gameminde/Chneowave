#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test MainWindow Isolation - Phase 2 du diagnostic
Test MainWindow CHNeoWave en isolation compl√®te
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from PySide6.QtWidgets import QApplication, QMainWindow, QLabel, QVBoxLayout, QWidget
from PySide6.QtCore import Qt, QTimer

def test_mainwindow_isolation():
    """Test MainWindow CHNeoWave en isolation compl√®te"""
    print("=== TEST MAINWINDOW ISOLATION ===")
    
    app = QApplication(sys.argv)
    print(f"‚úÖ QApplication cr√©√©e sur plateforme: {app.platformName()}")
    
    try:
        # Import MainWindow CHNeoWave
        print("üîç Import MainWindow CHNeoWave...")
        from hrneowave.gui.main_window import MainWindow
        print("‚úÖ Import MainWindow r√©ussi")
        
        # Cr√©ation MainWindow
        print("üîç Cr√©ation MainWindow...")
        window = MainWindow()
        print("‚úÖ MainWindow cr√©√©e")
        
        # V√©rifications d√©taill√©es
        print(f"‚úÖ Titre: {window.windowTitle()}")
        print(f"‚úÖ G√©om√©trie: {window.geometry()}")
        print(f"‚úÖ Taille minimale: {window.minimumSize()}")
        print(f"‚úÖ Visible: {window.isVisible()}")
        print(f"‚úÖ Widget central: {window.centralWidget()}")
        print(f"‚úÖ Actif: {window.isActiveWindow()}")
        
        # FORCER L'AFFICHAGE MAXIMUM
        print("üîç For√ßage affichage...")
        window.show()
        window.raise_()
        window.activateWindow()
        window.setWindowState(window.windowState() & ~Qt.WindowMinimized | Qt.WindowActive)
        
        # V√©rifications post-affichage
        print(f"‚úÖ Visible apr√®s show(): {window.isVisible()}")
        print(f"‚úÖ Actif apr√®s activation: {window.isActiveWindow()}")
        print(f"‚úÖ √âtat fen√™tre: {window.windowState()}")
        
        # Capture d'√©cran pour diagnostic
        try:
            screen = app.primaryScreen()
            screenshot = screen.grabWindow(0)
            screenshot.save("mainwindow_isolation_screenshot.png")
            print("‚úÖ Capture d'√©cran sauvegard√©e: mainwindow_isolation_screenshot.png")
        except Exception as e:
            print(f"‚ö†Ô∏è Capture d'√©cran √©chou√©e: {e}")
        
        # Timer pour fermer automatiquement
        timer = QTimer()
        timer.timeout.connect(app.quit)
        timer.start(5000)  # 5 secondes
        
        print("‚úÖ Test MainWindow isolation lanc√© - Fen√™tre visible pendant 5 secondes")
        return app.exec()
        
    except Exception as e:
        print(f"‚ùå ERREUR lors du test MainWindow: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    result = test_mainwindow_isolation()
    print(f"‚úÖ Test MainWindow isolation termin√© avec code: {result}")
    sys.exit(result)