#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CHNeoWave - Application principale SANS TIMER
Version: 1.1.0 - Modifi√©e pour rester ouverte
"""

import sys
import logging
import traceback
from pathlib import Path

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('src/hrneowave/chneowave_debug.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger('chneowave')

def main():
    """Point d'entr√©e principal de l'application SANS TIMER"""
    try:
        print("üöÄ Lancement de CHNeoWave v1.1.0 - SANS TIMER")
        print("=" * 60)
        
        # Ajouter le chemin du projet
        sys.path.insert(0, str(Path(__file__).parent / "src"))
        
        print("üìã √âTAPE 1: Cr√©ation QApplication")
        print("-" * 30)
        
        # Import et cr√©ation de QApplication
        from PySide6.QtWidgets import QApplication, QMessageBox
        from PySide6.QtCore import Qt, QTimer
        
        # Cr√©er QApplication
        app = QApplication.instance()
        if app is None:
            app = QApplication(sys.argv)
            app.setApplicationName("CHNeoWave Sans Timer")
            app.setApplicationVersion("1.1.0")
            app.setOrganizationName("CHNeoWave")
        
        print("‚úÖ QApplication cr√©√©")
        
        print("üìã √âTAPE 2: Application du th√®me")
        print("-" * 30)
        
        # Application du th√®me
        try:
            from hrneowave.gui.styles.theme_manager import ThemeManager
            theme_manager = ThemeManager(app=app)
            theme_manager.apply_theme('maritime_modern')
            print("‚úÖ Th√®me 'maritime_modern' appliqu√© avec succ√®s")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de l'application du th√®me: {e}")
            print("‚ö†Ô∏è Continuation sans th√®me...")
        
        print("‚úÖ Th√®me maritime appliqu√©")
        
        print("üìã √âTAPE 3: Cr√©ation MainWindow")
        print("-" * 30)
        
        # Import et cr√©ation de MainWindow
        print("üîÑ Import de MainWindow...")
        from hrneowave.gui.main_window import MainWindow
        print("‚úÖ MainWindow import√©")
        
        print("üîÑ Cr√©ation de l'instance MainWindow...")
        main_window = MainWindow()
        print("‚úÖ MainWindow cr√©√©e")
        
        print("üìã √âTAPE 4: Configuration de l'affichage")
        print("-" * 30)
        
        # Configuration de l'affichage
        main_window.setWindowTitle("CHNeoWave - Interface Maritime PERMANENTE")
        main_window.resize(1200, 800)
        
        # Centrer la fen√™tre
        screen = app.primaryScreen()
        screen_geometry = screen.geometry()
        window_geometry = main_window.geometry()
        
        x = (screen_geometry.width() - window_geometry.width()) // 2
        y = (screen_geometry.height() - window_geometry.height()) // 2
        main_window.move(x, y)
        
        print("‚úÖ Fen√™tre configur√©e et centr√©e")
        
        print("üìã √âTAPE 5: Affichage de l'interface")
        print("-" * 30)
        
        # Affichage de l'interface avec for√ßage multiple
        main_window.show()
        main_window.raise_()
        main_window.activateWindow()
        
        # Forcer au premier plan
        main_window.setWindowState(Qt.WindowActive)
        main_window.setAttribute(Qt.WA_ShowWithoutActivating, False)
        
        # V√©rifier la visibilit√©
        visible = main_window.isVisible()
        print(f"‚úÖ MainWindow visible: {visible}")
        
        if not visible:
            print("‚ö†Ô∏è Fen√™tre non visible, tentative de correction...")
            main_window.showNormal()
            main_window.show()
            visible = main_window.isVisible()
            print(f"‚úÖ MainWindow visible apr√®s correction: {visible}")
        
        print("‚úÖ Interface affich√©e avec succ√®s")
        print("üéâ CHNeoWave est maintenant op√©rationnel !")
        print("üîç V√©rifiez que la fen√™tre est visible sur votre √©cran")
        
        print("üìã √âTAPE 6: Lancement de la boucle d'√©v√©nements PERMANENTE")
        print("-" * 30)
        
        # Message de confirmation apr√®s 3 secondes
        def show_confirmation():
            if main_window.isVisible():
                msg = QMessageBox()
                msg.setWindowTitle("CHNeoWave - Confirmation")
                msg.setText("üéâ CHNeoWave est VISIBLE et OP√âRATIONNEL !\n\n"
                           "‚úÖ Interface affich√©e correctement\n"
                           "‚úÖ Navigation fonctionnelle\n"
                           "‚úÖ Tous les composants charg√©s\n\n"
                           "L'application restera ouverte jusqu'√† fermeture manuelle.")
                msg.setIcon(QMessageBox.Information)
                msg.exec()
            else:
                print("‚ùå PROBL√àME: Fen√™tre toujours invisible")
        
        # Timer pour confirmation (pas de fermeture)
        confirmation_timer = QTimer()
        confirmation_timer.timeout.connect(show_confirmation)
        confirmation_timer.setSingleShot(True)
        confirmation_timer.start(3000)  # 3 secondes
        
        print("üîÑ Lancement de la boucle d'√©v√©nements PERMANENTE...")
        print("‚ö†Ô∏è AUCUN TIMER DE FERMETURE - L'application reste ouverte")
        print("üîç Fermez manuellement la fen√™tre pour quitter")
        
        # Lancer la boucle d'√©v√©nements SANS TIMER DE FERMETURE
        exit_code = app.exec()
        print(f"‚úÖ Application termin√©e (code: {exit_code})")
        return exit_code
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de MainWindow: {e}")
        print("üîç Traceback complet:")
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    exit(main())