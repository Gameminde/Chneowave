#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test Affichage Simple - CHNeoWave
Test minimal pour forcer l'affichage de l'interface
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from PySide6.QtWidgets import QApplication, QMessageBox
from PySide6.QtCore import QTimer, Qt

def test_affichage_simple():
    """Test simple d'affichage CHNeoWave"""
    print("=== TEST AFFICHAGE SIMPLE CHNeoWave ===")
    
    # Cr√©er QApplication
    app = QApplication(sys.argv)
    app.setApplicationName("CHNeoWave Test Simple")
    print(f"‚úÖ QApplication cr√©√©e sur: {app.platformName()}")
    
    try:
        # Import et cr√©ation MainWindow
        print("üîç Import MainWindow...")
        from hrneowave.gui.main_window import MainWindow
        print("‚úÖ MainWindow import√©e")
        
        print("üîç Cr√©ation MainWindow...")
        window = MainWindow()
        print("‚úÖ MainWindow cr√©√©e")
        
        # Configuration basique
        window.setWindowTitle("CHNeoWave - Test Affichage Simple")
        window.setGeometry(200, 200, 1000, 700)
        
        # AFFICHAGE FORC√â
        print("üîç Affichage forc√©...")
        window.show()
        window.raise_()
        window.activateWindow()
        
        # V√©rifications
        print(f"‚úÖ Visible: {window.isVisible()}")
        print(f"‚úÖ G√©om√©trie: {window.geometry()}")
        print(f"‚úÖ Titre: {window.windowTitle()}")
        
        # Forcer le traitement des √©v√©nements
        app.processEvents()
        
        # Message de confirmation imm√©diat
        def show_immediate_confirmation():
            print("üîç Affichage du message de confirmation...")
            
            msg = QMessageBox()
            msg.setWindowTitle("CHNeoWave - Test R√©ussi")
            msg.setText("üéâ TEST D'AFFICHAGE R√âUSSI !\n\n"
                       f"‚úÖ MainWindow visible: {window.isVisible()}\n"
                       f"‚úÖ G√©om√©trie: {window.geometry()}\n"
                       f"‚úÖ Position: ({window.x()}, {window.y()})\n"
                       f"‚úÖ Taille: {window.width()}x{window.height()}\n\n"
                       "L'interface CHNeoWave devrait √™tre visible !\n\n"
                       "Cliquez OK pour fermer le test.")
            msg.setIcon(QMessageBox.Information)
            
            # Positionner le message pr√®s de la fen√™tre
            msg.move(window.x() + 50, window.y() + 50)
            
            result = msg.exec()
            print(f"‚úÖ Message ferm√© avec r√©sultat: {result}")
            
            # Fermer l'application
            app.quit()
        
        # Timer pour affichage imm√©diat du message
        timer = QTimer()
        timer.timeout.connect(show_immediate_confirmation)
        timer.setSingleShot(True)
        timer.start(1000)  # 1 seconde
        
        print("‚è∞ Message de confirmation dans 1 seconde...")
        print("üîç V√©rifiez si la fen√™tre CHNeoWave est visible")
        
        # Lancer la boucle d'√©v√©nements
        exit_code = app.exec()
        print(f"‚úÖ Application termin√©e avec code: {exit_code}")
        
        return exit_code
        
    except Exception as e:
        print(f"‚ùå ERREUR: {e}")
        import traceback
        traceback.print_exc()
        
        # Message d'erreur
        error_msg = QMessageBox()
        error_msg.setWindowTitle("CHNeoWave - Erreur")
        error_msg.setText(f"‚ùå ERREUR LORS DU TEST:\n\n{e}\n\nConsultez la console pour plus de d√©tails.")
        error_msg.setIcon(QMessageBox.Critical)
        error_msg.exec()
        
        return 1

if __name__ == "__main__":
    result = test_affichage_simple()
    print(f"\nüèÅ Test termin√© avec code: {result}")
    
    if result == 0:
        print("üéâ TEST R√âUSSI - Interface visible")
    else:
        print("‚ùå TEST √âCHOU√â - Probl√®me d√©tect√©")
    
    sys.exit(result)