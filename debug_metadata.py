#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de diagnostic pour le gestionnaire de m√©tadonn√©es
"""

import sys
import os
from pathlib import Path
import traceback

# Ajouter le chemin source
sys.path.insert(0, str(Path(__file__).parent / "src"))

print("üîç Diagnostic du gestionnaire de m√©tadonn√©es")
print("=" * 50)

# Test d'import √©tape par √©tape
print("\n1. Test d'import des modules de base...")
try:
    import json
    import uuid
    from datetime import datetime, timedelta
    from enum import Enum
    from dataclasses import dataclass, field, asdict
    from typing import List, Dict, Optional, Any, Union
    from pathlib import Path
    import hashlib
    print("‚úì Modules de base import√©s")
except Exception as e:
    print(f"‚ùå Erreur import modules de base: {e}")
    sys.exit(1)

print("\n2. Test d'import du module metadata_manager...")
try:
    from hrneowave.core.metadata_manager import (
        ExperimentType,
        WaveType,
        SensorMetadata,
        WaveConditions,
        EnvironmentalConditions,
        ModelGeometry,
        AcquisitionSettings,
        SessionMetadata,
        MetadataManager,
        create_sample_session_metadata
    )
    print("‚úì Module metadata_manager import√©")
except Exception as e:
    print(f"‚ùå Erreur import metadata_manager: {e}")
    print("\nTraceback complet:")
    traceback.print_exc()
    sys.exit(1)

print("\n3. Test de cr√©ation des classes...")
try:
    # Test ExperimentType
    exp_type = ExperimentType.WAVE_PROPAGATION
    print(f"‚úì ExperimentType: {exp_type}")
    
    # Test WaveType
    wave_type = WaveType.REGULAR
    print(f"‚úì WaveType: {wave_type}")
    
    # Test SensorMetadata
    sensor = SensorMetadata(
        sensor_id="TEST_001",
        sensor_type="wave_probe",
        channel=0,
        location={"x": 0.0, "y": 0.0, "z": 0.0},
        measurement_range={"min": -300, "max": 300},
        units="mm"
    )
    print(f"‚úì SensorMetadata: {sensor.sensor_id}")
    
    # Test WaveConditions
    wave_conditions = WaveConditions(
        wave_type=WaveType.REGULAR,
        significant_height=0.1,
        peak_period=2.0,
        wave_direction=0.0,
        water_depth=0.5
    )
    print(f"‚úì WaveConditions: H={wave_conditions.significant_height}m")
    
    # Test EnvironmentalConditions
    env_conditions = EnvironmentalConditions(
        temperature=20.0,
        humidity=50.0,
        atmospheric_pressure=1013.25
    )
    print(f"‚úì EnvironmentalConditions: T={env_conditions.temperature}¬∞C")
    
    # Test ModelGeometry
    model_geometry = ModelGeometry(
        model_name="Test Model",
        model_type="ship",
        scale_factor=1.0,
        length=1.0,
        beam=0.2,
        draft=0.05
    )
    print(f"‚úì ModelGeometry: {model_geometry.model_name}")
    
    # Test AcquisitionSettings
    acq_settings = AcquisitionSettings(
        sampling_rate=100.0,
        duration=60.0,
        pre_trigger=5.0,
        post_trigger=5.0
    )
    print(f"‚úì AcquisitionSettings: {acq_settings.sampling_rate}Hz")
    
except Exception as e:
    print(f"‚ùå Erreur cr√©ation classes: {e}")
    traceback.print_exc()
    sys.exit(1)

print("\n4. Test de cr√©ation SessionMetadata...")
try:
    session = SessionMetadata(
        session_id=str(uuid.uuid4()),
        session_name="Test Session",
        experiment_type=ExperimentType.WAVE_PROPAGATION,
        test_number="TEST_001",
        operator="Test Operator",
        created_at=datetime.now(),
        sensors=[sensor],
        wave_conditions=wave_conditions,
        environmental_conditions=env_conditions,
        model_geometry=model_geometry,
        acquisition_settings=acq_settings
    )
    print(f"‚úì SessionMetadata cr√©√©: {session.session_id}")
    
    # Test de s√©rialisation
    session_dict = asdict(session)
    print(f"‚úì S√©rialisation r√©ussie: {len(session_dict)} champs")
    
    # Test de v√©rification d'int√©grit√©
    integrity_ok = session.verify_integrity()
    print(f"‚úì Int√©grit√©: {integrity_ok}")
    
except Exception as e:
    print(f"‚ùå Erreur SessionMetadata: {e}")
    traceback.print_exc()
    sys.exit(1)

print("\n5. Test de cr√©ation d'exemple...")
try:
    sample_session = create_sample_session_metadata()
    print(f"‚úì Session d'exemple cr√©√©e: {sample_session.session_name}")
    print(f"  - ID: {sample_session.session_id}")
    print(f"  - Type: {sample_session.experiment_type}")
    print(f"  - Capteurs: {len(sample_session.sensors)}")
    
except Exception as e:
    print(f"‚ùå Erreur cr√©ation exemple: {e}")
    traceback.print_exc()
    sys.exit(1)

print("\n6. Test MetadataManager...")
try:
    import tempfile
    
    with tempfile.TemporaryDirectory() as temp_dir:
        print(f"‚úì R√©pertoire temporaire: {temp_dir}")
        
        # Cr√©er le gestionnaire
        manager = MetadataManager(temp_dir)
        print("‚úì MetadataManager cr√©√©")
        
        # Sauvegarder
        file_path = manager.save_metadata(sample_session)
        print(f"‚úì Sauvegarde: {file_path.name}")
        
        # Charger
        loaded_session = manager.load_metadata(file_path)
        print(f"‚úì Chargement: {loaded_session.session_name}")
        
        # V√©rifier coh√©rence
        if loaded_session.session_id != sample_session.session_id:
            raise ValueError("ID de session diff√©rent")
        print("‚úì Coh√©rence v√©rifi√©e")
        
        # Lister
        sessions = manager.list_sessions()
        print(f"‚úì Sessions list√©es: {len(sessions)}")
        
except Exception as e:
    print(f"‚ùå Erreur MetadataManager: {e}")
    traceback.print_exc()
    sys.exit(1)

print("\n‚úÖ DIAGNOSTIC R√âUSSI")
print("Le module metadata_manager fonctionne correctement.")
print("Le probl√®me doit √™tre ailleurs dans le test principal.")