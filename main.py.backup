#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CHNeoWave - Point d'entr√©e principal
Logiciel d'acquisition et d'analyse de houle pour laboratoires maritimes

Version 1.0.0 - Interface refactoris√©e avec flux s√©quentiel
Flux : Accueil -> Calibration -> Acquisition -> Analyse
"""

import sys
import logging
from pathlib import Path

# Configuration du logging centralis√©e
# Le setup est maintenant g√©r√© via le module de logging de hrneowave
from hrneowave.core.logging_config import setup_logging
setup_logging() # Initialise le logging pour toute l'application

log = logging.getLogger(__name__)

# --- Importations Centralis√©es PySide6 ---
# Importer tous les composants Qt n√©cessaires ici pour garantir qu'une seule version
# de chaque classe est charg√©e dans toute l'application.

from PySide6.QtWidgets import QApplication
from hrneowave.gui.main_window import MainWindow
from PySide6.QtCore import Qt, QObject, Signal

# --- Fin des Importations Centralis√©es ---



from hrneowave.gui.view_manager import ViewManager
from hrneowave.gui.controllers.main_controller import MainController
from hrneowave.gui.styles.theme_manager import ThemeManager

def main():
    """
    Point d'entr√©e principal de l'application CHNeoWave.
    Initialise et lance l'interface graphique.
    """
    print("üöÄ Lancement de CHNeoWave v1.1.0")
    print("=" * 50)
    
    log.info(f"Lancement de CHNeoWave v1.1.0")
    app = QApplication(sys.argv)
    app.setApplicationName("CHNeoWave")
    app.setApplicationVersion("1.1.0")
    app.setOrganizationName("Laboratoire d'Hydrodynamique Maritime")
    
    # CORRECTION CRITIQUE : Configuration QApplication
    app.setQuitOnLastWindowClosed(True)

    try:
        log.info("Initialisation du gestionnaire de th√®mes...")
        theme_manager = ThemeManager(app)
        # Application du nouveau th√®me maritime moderne par d√©faut
        theme_manager.apply_theme('maritime_modern')
        print("‚úÖ Th√®me maritime appliqu√©")

        log.info("Cr√©ation de la fen√™tre principale...")
        try:
            main_window = MainWindow()
            log.info("MainWindow cr√©√©e avec succ√®s")
            print("‚úÖ MainWindow cr√©√©e")
        except Exception as e:
            log.error(f"Erreur lors de la cr√©ation de MainWindow: {e}", exc_info=True)
            print(f"‚ùå Erreur MainWindow: {e}")
            raise
        
        log.info("Affichage de la fen√™tre principale.")
        print("üñ•Ô∏è Affichage de l'interface...")
        
        # CORRECTION CRITIQUE : Forcer l'affichage AVANT la boucle d'√©v√©nements
        main_window.show()
        main_window.raise_()
        main_window.activateWindow()
        
        # CORRECTION : Forcer l'√©tat de la fen√™tre
        main_window.setWindowState(main_window.windowState() & ~Qt.WindowMinimized | Qt.WindowActive)
        
        # S'assurer que la fen√™tre est visible
        if not main_window.isVisible():
            log.warning("La fen√™tre n'est pas visible, tentative de maximisation...")
            main_window.showMaximized()
            print("‚ö†Ô∏è Tentative de maximisation...")
        
        # CORRECTION : V√©rifications d√©taill√©es
        visible = main_window.isVisible()
        active = main_window.isActiveWindow()
        minimized = main_window.isMinimized()
        
        log.info(f"Fen√™tre visible: {visible}, Taille: {main_window.size()}")
        log.info(f"Position de la fen√™tre: {main_window.pos()}")
        log.info(f"√âtat de la fen√™tre: Active={active}, Minimized={minimized}")
        
        print(f"‚úÖ Fen√™tre visible: {visible}")
        print(f"‚úÖ Position: {main_window.pos()}")
        print(f"‚úÖ Taille: {main_window.size()}")
        
        if visible:
            print("üéâ SUCC√àS: CHNeoWave est visible √† l'√©cran!")
            print("üëÄ L'interface devrait maintenant √™tre affich√©e")
        else:
            print("‚ùå PROBL√àME: CHNeoWave n'est pas visible")
            return 1
        
        log.info("D√©marrage de la boucle d'√©v√©nements de l'application.")
        print("üîÑ D√©marrage de la boucle d'√©v√©nements...")
        
        # CORRECTION CRITIQUE : D√©marrer la boucle d'√©v√©nements
        exit_code = app.exec()
        
        log.info(f"Application termin√©e avec le code de sortie: {exit_code}")
        print(f"‚úÖ CHNeoWave ferm√© (code: {exit_code})")
        return exit_code
        
    except Exception as e:
        log.critical(f"Une erreur critique a emp√™ch√© le lancement de l'application: {e}", exc_info=True)
        print(f"‚ùå ERREUR CRITIQUE: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())