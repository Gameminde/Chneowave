#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test simple de validation de l'interface CHNeoWave
Se concentre sur les probl√®mes principaux sans matplotlib
"""

import sys
import os
from pathlib import Path

# Ajouter le chemin src au PYTHONPATH
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

from PySide6.QtWidgets import QApplication
from PySide6.QtCore import QTimer

def test_interface_fixes():
    """Test simple des corrections d'interface"""
    print("CHNeoWave - Test simple de validation")
    print("=" * 50)
    
    # Cr√©er l'application Qt
    app = QApplication.instance()
    if app is None:
        app = QApplication(sys.argv)
    
    errors = []
    
    try:
        print("\n1. Test d'importation des modules...")
        
        # Test d'importation de MainWindow
        from hrneowave.gui.main_window import MainWindow
        print("‚úì MainWindow import√©e")
        
        # Test d'importation de ViewManager
        from hrneowave.gui.view_manager import ViewManager
        print("‚úì ViewManager import√©")
        
        # Test d'importation de MainSidebar
        from hrneowave.gui.components.main_sidebar import MainSidebar
        print("‚úì MainSidebar import√©e")
        
        print("\n2. Test de cr√©ation de MainWindow...")
        main_window = MainWindow()
        print("‚úì MainWindow cr√©√©e avec succ√®s")
        
        print("\n3. Test de ViewManager...")
        view_manager = main_window.view_manager
        
        # V√©rifier les m√©thodes du ViewManager
        if hasattr(view_manager, 'switch_to_view'):
            print("‚úì M√©thode switch_to_view disponible")
        else:
            errors.append("M√©thode switch_to_view manquante")
            
        if hasattr(view_manager, 'has_view'):
            print("‚úì M√©thode has_view disponible")
        else:
            errors.append("M√©thode has_view manquante")
            
        if hasattr(view_manager, 'get_view_widget'):
            print("‚úì M√©thode get_view_widget disponible")
        else:
            errors.append("M√©thode get_view_widget manquante")
        
        print("\n4. Test des vues enregistr√©es...")
        required_views = ['welcome', 'dashboard', 'manual_calibration', 'acquisition']
        for view_name in required_views:
            if view_manager.has_view(view_name):
                print(f"‚úì Vue '{view_name}' enregistr√©e")
            else:
                print(f"‚úó Vue '{view_name}' manquante")
                errors.append(f"Vue {view_name} non enregistr√©e")
        
        print("\n5. Test de navigation...")
        # Test navigation vers welcome
        try:
            success = view_manager.switch_to_view('welcome')
            if success:
                print("‚úì Navigation vers 'welcome' r√©ussie")
            else:
                print("‚úó Navigation vers 'welcome' √©chou√©e")
                errors.append("Navigation welcome √©chou√©e")
        except Exception as e:
            print(f"‚úó Erreur navigation welcome: {e}")
            errors.append(f"Navigation welcome: {e}")
        
        # Test navigation vers dashboard
        try:
            success = view_manager.switch_to_view('dashboard')
            if success:
                print("‚úì Navigation vers 'dashboard' r√©ussie")
            else:
                print("‚úó Navigation vers 'dashboard' √©chou√©e")
                errors.append("Navigation dashboard √©chou√©e")
        except Exception as e:
            print(f"‚úó Erreur navigation dashboard: {e}")
            errors.append(f"Navigation dashboard: {e}")
        
        print("\n6. Test de la sidebar...")
        sidebar = main_window.sidebar
        if sidebar:
            print("‚úì Sidebar accessible")
            
            # V√©rifier le signal de navigation
            if hasattr(sidebar, 'navigation_requested'):
                print("‚úì Signal navigation_requested disponible")
            else:
                print("‚úó Signal navigation_requested manquant")
                errors.append("Signal navigation_requested manquant")
        else:
            print("‚úó Sidebar non accessible")
            errors.append("Sidebar inaccessible")
        
        print("\n7. Test du workflow de cr√©ation de projet...")
        welcome_view = view_manager.get_view_widget('welcome')
        if welcome_view:
            print("‚úì Vue welcome accessible")
            
            # V√©rifier les champs de saisie
            required_fields = ['project_name', 'project_manager', 'laboratory', 'description']
            for field_name in required_fields:
                if hasattr(welcome_view, field_name):
                    print(f"‚úì Champ '{field_name}' disponible")
                else:
                    print(f"‚úó Champ '{field_name}' manquant")
                    errors.append(f"Champ {field_name} manquant")
            
            # V√©rifier le bouton de validation
            if hasattr(welcome_view, 'validate_button'):
                print("‚úì Bouton de validation disponible")
            else:
                print("‚úó Bouton de validation manquant")
                errors.append("Bouton validation manquant")
            
            # V√©rifier le signal de cr√©ation de projet
            if hasattr(welcome_view, 'projectCreationRequested'):
                print("‚úì Signal projectCreationRequested disponible")
            else:
                print("‚úó Signal projectCreationRequested manquant")
                errors.append("Signal projectCreationRequested manquant")
        else:
            print("‚úó Vue welcome non accessible")
            errors.append("Vue welcome inaccessible")
        
        # Nettoyer
        main_window.close()
        
    except Exception as e:
        print(f"\n‚úó ERREUR CRITIQUE: {e}")
        errors.append(f"Erreur critique: {e}")
    
    # R√©sultats
    print("\n" + "=" * 50)
    if errors:
        print(f"‚ùå ERREURS D√âTECT√âES ({len(errors)}):")
        for i, error in enumerate(errors, 1):
            print(f"  {i}. {error}")
        return False
    else:
        print("üéâ TOUS LES TESTS SONT PASS√âS!")
        print("‚úì Interface corrig√©e avec succ√®s")
        print("‚úì Navigation fonctionnelle")
        print("‚úì Workflow de cr√©ation de projet op√©rationnel")
        return True

if __name__ == "__main__":
    success = test_interface_fixes()
    sys.exit(0 if success else 1)