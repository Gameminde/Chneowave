#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test pour identifier le QLabel qui cause l'erreur CSS
CHNeoWave - Diagnostic CSS Error
"""

import sys
import logging
from pathlib import Path

# Ajouter le chemin du projet
sys.path.insert(0, str(Path(__file__).parent / "src"))

from PySide6.QtWidgets import QApplication
from PySide6.QtCore import Qt

def test_css_error_debug():
    """Test pour identifier la source de l'erreur CSS"""
    
    # Configuration logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    logger = logging.getLogger('chneowave')
    logger.info("Test CSS Error Debug - Syst√®me de logging configur√©")
    
    app = QApplication(sys.argv)
    
    # Test 1: Importer et appliquer le th√®me
    try:
        from hrneowave.gui.styles.theme_manager import ThemeManager
        theme_manager = ThemeManager(app)
        theme_manager.apply_theme('maritime_modern')
        logger.info("‚úÖ Th√®me appliqu√© avec succ√®s")
    except Exception as e:
        logger.error(f"‚ùå Erreur th√®me: {e}")
        return 1
    
    # Test 2: Importer les composants un par un
    components_to_test = [
        ('MainSidebar', 'hrneowave.gui.widgets.main_sidebar'),
        ('BreadcrumbsWidget', 'hrneowave.gui.components.breadcrumbs'),
        ('SystemStatusWidget', 'hrneowave.gui.components.status_indicators'),
        ('HelpPanel', 'hrneowave.gui.components.help_system'),
        ('WelcomeView', 'hrneowave.gui.views'),
        ('DashboardViewMaritime', 'hrneowave.gui.views')
    ]
    
    for component_name, module_name in components_to_test:
        try:
            logger.info(f"üß™ Test import {component_name}...")
            module = __import__(module_name, fromlist=[component_name])
            component_class = getattr(module, component_name)
            
            # Cr√©er une instance du composant
            logger.info(f"üß™ Cr√©ation instance {component_name}...")
            instance = component_class()
            
            logger.info(f"‚úÖ {component_name} cr√©√© avec succ√®s")
            
            # Nettoyer l'instance
            instance.deleteLater()
            
        except Exception as e:
            logger.error(f"‚ùå Erreur avec {component_name}: {e}")
            logger.error(f"Module: {module_name}")
            import traceback
            traceback.print_exc()
    
    # Test 3: Cr√©er MainWindow √©tape par √©tape
    try:
        logger.info("üß™ Test cr√©ation MainWindow...")
        from hrneowave.gui.main_window import MainWindow
        
        logger.info("üß™ Instanciation MainWindow...")
        window = MainWindow()
        
        logger.info("‚úÖ MainWindow cr√©√©e avec succ√®s")
        
        # Afficher bri√®vement
        window.show()
        window.raise_()
        window.activateWindow()
        
        logger.info(f"‚úÖ G√©om√©trie : {window.geometry()}")
        logger.info(f"‚úÖ Visible : {window.isVisible()}")
        
        # Fermer automatiquement apr√®s 2 secondes
        from PySide6.QtCore import QTimer
        timer = QTimer()
        timer.timeout.connect(app.quit)
        timer.start(2000)
        
        exit_code = app.exec()
        logger.info(f"‚úÖ Application ferm√©e avec code: {exit_code}")
        return exit_code
        
    except Exception as e:
        logger.error(f"‚ùå Erreur MainWindow: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    print("üß™ Test CSS Error Debug")
    print("=" * 50)
    
    try:
        exit_code = test_css_error_debug()
        print(f"\n‚úÖ Test termin√© avec code: {exit_code}")
        
        if exit_code == 0:
            print("üéâ Aucune erreur critique d√©tect√©e!")
        else:
            print("‚ùå Erreur d√©tect√©e - voir les logs")
            
    except Exception as e:
        print(f"\nüí• Erreur critique: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)